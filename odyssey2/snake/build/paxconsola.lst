 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 1 - 01/10/2022 00:51:37


       1/       0 :                     	    cpu	8048
       2/       0 :                             
       3/       0 :                             include	"g7000.h"
(1)    1/       0 :                     ; This file contains definitions I use in my programs.
(1)    2/       0 :                     
(1)    3/       0 :                     ; $Id: g7000.h 594 2006-12-08 13:59:35Z sgust $
(1)    4/       0 :                     
(1)    5/       0 :                     ; Version 1.3
(1)    6/       0 :                     
(1)    7/       0 :                     ; Copyright (C) 1997-2006 by Soeren Gust, sgust@ithh.informationstheater.de
(1)    8/       0 :                     
(1)    9/       0 :                     ; Permission is hereby granted, free of charge, to any person obtaining a copy
(1)   10/       0 :                     ; of this software and associated documentation files (the "Software"), to deal
(1)   11/       0 :                     ; in the Software without restriction, including without limitation the rights
(1)   12/       0 :                     ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
(1)   13/       0 :                     ; copies of the Software, and to permit persons to whom the Software is
(1)   14/       0 :                     ; furnished to do so, subject to the following conditions:
(1)   15/       0 :                     
(1)   16/       0 :                     ; The above copyright notice and this permission notice shall be included in
(1)   17/       0 :                     ; all copies or substantial portions of the Software.
(1)   18/       0 :                     
(1)   19/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
(1)   20/       0 :                     ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
(1)   21/       0 :                     ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
(1)   22/       0 :                     ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
(1)   23/       0 :                     ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
(1)   24/       0 :                     ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
(1)   25/       0 :                     ; THE SOFTWARE.
(1)   26/       0 :                     
(1)   27/       0 :                     ; NOTE: Since version 0.8.8 I have changed the license conditions. The former
(1)   28/       0 :                     ; GNU Public License did not really make sense since this is just an include
(1)   29/       0 :                     ; file and does not generate code on its own.
(1)   30/       0 :                     
(1)   31/       0 :                     ; You can always get the latest version at http://soeren.informationstheater.de
(1)   32/       0 :                     
(1)   33/       0 :                     ; BIOS routines for Videopac G7000
(1)   34/       0 : =9H                  irq		equ	0009h
(1)   35/       0 : =14H                 irqend		equ	0014h
(1)   36/       0 : =1AH                 vsyncirq	equ	001Ah
(1)   37/       0 : =44H                 soundirq	equ	0044h
(1)   38/       0 : =4BH                 parsesnd	equ	004Bh
(1)   39/       0 : =89H                 copyregs	equ	0089h	; internal
(1)   40/       0 : =0B0H                readkey		equ	00B0h
(1)   41/       0 : =0BCH                readkey_plus	equ	00BCh	; entry point for readkey on VP+ G7400
(1)   42/       0 : =0E7H                vdcenable	equ	00E7h
(1)   43/       0 : =0ECH                extramenable	equ	00ECh
(1)   44/       0 : =0F1H                init		equ	00F1h
(1)   45/       0 : =11CH                gfxoff		equ	011Ch
(1)   46/       0 : =127H                gfxon		equ	0127h
(1)   47/       0 : =132H                tableend	equ	0132h
(1)   48/       0 : =13DH                waitforkey	equ	013Dh
(1)   49/       0 : =14BH                calcchar23	equ	014Bh
(1)   50/       0 : =16BH                clearchar	equ	016Bh
(1)   51/       0 : =176H                waitvsync	equ	0176h
(1)   52/       0 : =17CH                tablebcdbyte	equ	017Ch
(1)   53/       0 : =197H                tableprintchar	equ	0197h
(1)   54/       0 : =1A2H                playsound	equ	01A2h
(1)   55/       0 : =1B0H                doclock		equ	01B0h
(1)   56/       0 : =22CH                tablechar23	equ	022Ch
(1)   57/       0 : =229H                tablebcdnibble	equ	0229h
 AS V1.42 Beta [Bld 213] - Source File main.asm(g7000.h) - Page 2 - 01/10/2022 00:51:37


(1)   58/       0 : =235H                tableput2	equ	0235h
(1)   59/       0 : =23AH                initclock	equ	023Ah
(1)   60/       0 : =261H                putchar23	equ	0261h
(1)   61/       0 : =26AH                bittest		equ	026Ah	; not available on Videopac+ G7400
(1)   62/       0 : =280H                bitclear	equ	0280h	; not available on Videopac+ G7400
(1)   63/       0 : =28AH                bitset		equ	028Ah	; not available on Videopac+ G7400
(1)   64/       0 : =293H                random		equ	0293h	; not available on Videopac+ G7400
(1)   65/       0 : =2A4H                nibblemixer	equ	02A4h	; not available on Videopac+ G7400
(1)   66/       0 : =2C3H                selectgame	equ	02C3h
(1)   67/       0 : =37FH                bank02		equ	037Fh
(1)   68/       0 : =383H                bank01		equ	0383h
(1)   69/       0 : =387H                bank0		equ	0387h
(1)   70/       0 : =38BH                bank3		equ	038Bh
(1)   71/       0 : =38FH                getjoystick	equ	038Fh
(1)   72/       0 : =395H                getjoystick_p17	equ	0395h	; entry point for getjoystick when using P17
(1)   73/       0 : =3B1H                decodejoystick	equ	03B1h
(1)   74/       0 : =3DDH                divide		equ	03DDh
(1)   75/       0 : =3CFH                multiply	equ	03CFh
(1)   76/       0 : =3EAH                printchar	equ	03EAh
(1)   77/       0 :                     
(1)   78/       0 :                     ; the vdc registers
(1)   79/       0 : =0H                  vdc_spr0_ctrl	equ	000h
(1)   80/       0 : =4H                  vdc_spr1_ctrl	equ	004h
(1)   81/       0 : =8H                  vdc_spr2_ctrl	equ	008h
(1)   82/       0 : =0CH                 vdc_spr3_ctrl	equ	00Ch
(1)   83/       0 :                     
(1)   84/       0 : =10H                 vdc_char0	equ	010h
(1)   85/       0 : =14H                 vdc_char1	equ	014h
(1)   86/       0 : =18H                 vdc_char2	equ	018h
(1)   87/       0 : =1CH                 vdc_char3	equ	01Ch
(1)   88/       0 : =20H                 vdc_char4	equ	020h
(1)   89/       0 : =24H                 vdc_char5	equ	024h
(1)   90/       0 : =28H                 vdc_char6	equ	028h
(1)   91/       0 : =2CH                 vdc_char7	equ	02Ch
(1)   92/       0 : =30H                 vdc_char8	equ	030h
(1)   93/       0 : =34H                 vdc_char9	equ	034h
(1)   94/       0 : =38H                 vdc_chara	equ	038h
(1)   95/       0 : =3CH                 vdc_charb	equ	03Ch
(1)   96/       0 :                     
(1)   97/       0 : =40H                 vdc_quad0	equ	040h
(1)   98/       0 : =50H                 vdc_quad1	equ	050h
(1)   99/       0 : =60H                 vdc_quad2	equ	060h
(1)  100/       0 : =70H                 vdc_quad3	equ	070h
(1)  101/       0 :                     
(1)  102/       0 : =80H                 vdc_spr0_shape	equ	080h
(1)  103/       0 : =88H                 vdc_spr1_shape	equ	088h
(1)  104/       0 : =90H                 vdc_spr2_shape	equ	090h
(1)  105/       0 : =98H                 vdc_spr3_shape	equ	098h
(1)  106/       0 :                     
(1)  107/       0 : =0A0H                vdc_control	equ	0a0h
(1)  108/       0 : =0A1H                vdc_status	equ	0a1h
(1)  109/       0 : =0A2H                vdc_collision	equ	0a2h
(1)  110/       0 : =0A3H                vdc_color	equ	0a3h
(1)  111/       0 : =0A4H                vdc_scanline	equ	0a4h
(1)  112/       0 : =0A5H                vdc_scanrow	equ	0a5h
(1)  113/       0 :                     ;vdc_unknown	equ	0a6h
(1)  114/       0 : =0A7H                vdc_sound0	equ	0a7h
(1)  115/       0 : =0A8H                vdc_sound1	equ	0a8h
(1)  116/       0 : =0A9H                vdc_sound2	equ	0a9h
(1)  117/       0 : =0AAH                vdc_soundctrl	equ	0aah
 AS V1.42 Beta [Bld 213] - Source File main.asm(g7000.h) - Page 3 - 01/10/2022 00:51:37


(1)  118/       0 :                     
(1)  119/       0 : =0C0H                vdc_gridh0	equ	0C0h
(1)  120/       0 : =0C1H                vdc_gridh1	equ	0C1h
(1)  121/       0 : =0C2H                vdc_gridh2	equ	0C2h
(1)  122/       0 : =0C3H                vdc_gridh3	equ	0C3h
(1)  123/       0 : =0C4H                vdc_gridh4	equ	0C4h
(1)  124/       0 : =0C5H                vdc_gridh5	equ	0C5h
(1)  125/       0 : =0C6H                vdc_gridh6	equ	0C6h
(1)  126/       0 : =0C7H                vdc_gridh7	equ	0C7h
(1)  127/       0 : =0C8H                vdc_gridh8	equ	0C8h
(1)  128/       0 :                     
(1)  129/       0 : =0D0H                vdc_gridi0	equ	0D0h
(1)  130/       0 : =0D1H                vdc_gridi1	equ	0D1h
(1)  131/       0 : =0D2H                vdc_gridi2	equ	0D2h
(1)  132/       0 : =0D3H                vdc_gridi3	equ	0D3h
(1)  133/       0 : =0D4H                vdc_gridi4	equ	0D4h
(1)  134/       0 : =0D5H                vdc_gridi5	equ	0D5h
(1)  135/       0 : =0D6H                vdc_gridi6	equ	0D6h
(1)  136/       0 : =0D7H                vdc_gridi7	equ	0D7h
(1)  137/       0 : =0D8H                vdc_gridi8	equ	0D8h
(1)  138/       0 :                     
(1)  139/       0 : =0E0H                vdc_gridv0	equ	0E0h
(1)  140/       0 : =0E1H                vdc_gridv1	equ	0E1h
(1)  141/       0 : =0E2H                vdc_gridv2	equ	0E2h
(1)  142/       0 : =0E3H                vdc_gridv3	equ	0E3h
(1)  143/       0 : =0E4H                vdc_gridv4	equ	0E4h
(1)  144/       0 : =0E5H                vdc_gridv5	equ	0E5h
(1)  145/       0 : =0E6H                vdc_gridv6	equ	0E6h
(1)  146/       0 : =0E7H                vdc_gridv7	equ	0E7h
(1)  147/       0 : =0E8H                vdc_gridv8	equ	0E8h
(1)  148/       0 : =0E9H                vdc_gridv9	equ	0E9h
(1)  149/       0 :                     
(1)  150/       0 :                     ; the bits in the vdc_control
(1)  151/       0 : =1H                  vdc_ctrl_hint	equ	001h
(1)  152/       0 : =2H                  vdc_ctrl_beam	equ	002h
(1)  153/       0 : =4H                  vdc_ctrl_sint	equ	004h
(1)  154/       0 : =8H                  vdc_ctrl_grid	equ	008h
(1)  155/       0 : =10H                 vdc_ctrl_ovrlay	equ	010h
(1)  156/       0 : =20H                 vdc_ctrl_fore	equ	020h
(1)  157/       0 : =40H                 vdc_ctrl_dot	equ	040h
(1)  158/       0 : =80H                 vdc_ctrl_fill	equ	080h
(1)  159/       0 :                     
(1)  160/       0 :                     ; the bits in vdc_status
(1)  161/       0 : =1H                  vdc_stat_hblank	equ	001h
(1)  162/       0 : =2H                  vdc_stat_pstrb	equ	002h
(1)  163/       0 : =4H                  vdc_stat_sound	equ	004h
(1)  164/       0 : =8H                  vdc_stat_vblank	equ	008h
(1)  165/       0 : =10H                 vdc_stat_bit4	equ	010h
(1)  166/       0 : =20H                 vdc_stat_bit5	equ	020h
(1)  167/       0 : =40H                 vdc_stat_ovrlay	equ	040h	; unused in G7000/O^2
(1)  168/       0 : =80H                 vdc_stat_chrlap	equ	080h
(1)  169/       0 :                     
(1)  170/       0 :                     ; the bits in vdc_collision
(1)  171/       0 : =1H                  vdc_coll_spr0	equ	001h
(1)  172/       0 : =2H                  vdc_coll_spr1	equ	002h
(1)  173/       0 : =4H                  vdc_coll_spr2	equ	004h
(1)  174/       0 : =8H                  vdc_coll_spr3	equ	008h
(1)  175/       0 : =10H                 vdc_coll_vgrd	equ	010h
(1)  176/       0 : =20H                 vdc_coll_hgrd	equ	020h
(1)  177/       0 : =40H                 vdc_coll_ext	equ	040h	; only used on Videopac+ G7400
 AS V1.42 Beta [Bld 213] - Source File main.asm(g7000.h) - Page 4 - 01/10/2022 00:51:37


(1)  178/       0 : =80H                 vdc_coll_char	equ	080h
(1)  179/       0 :                     
(1)  180/       0 :                     ; the bits in vdc_soundctrl
(1)  181/       0 : =10H                 vdc_sound_noise	equ	010h
(1)  182/       0 : =20H                 vdc_sound_freq	equ	020h
(1)  183/       0 : =40H                 vdc_sound_loop	equ	040h
(1)  184/       0 : =80H                 vdc_sound_enab	equ	080h
(1)  185/       0 :                     
(1)  186/       0 :                     ; the names match the colors on my PAL Videopac G7000
(1)  187/       0 :                     
(1)  188/       0 :                     ; the colors for characters
(1)  189/       0 : =0H                  col_chr_black	equ	00h << 1
(1)  190/       0 : =2H                  col_chr_red	equ	01h << 1
(1)  191/       0 : =4H                  col_chr_green	equ	02h << 1
(1)  192/       0 : =6H                  col_chr_yellow	equ	03h << 1
(1)  193/       0 : =8H                  col_chr_blue	equ	04h << 1
(1)  194/       0 : =0AH                 col_chr_violet	equ	05h << 1
(1)  195/       0 : =0CH                 col_chr_cyan	equ	06h << 1
(1)  196/       0 : =0EH                 col_chr_white	equ	07h << 1
(1)  197/       0 :                     
(1)  198/       0 :                     ; sprite control byte 3
(1)  199/       0 : =2H                  spr_evenshift	equ	02h
(1)  200/       0 : =4H                  spr_double	equ	04h
(1)  201/       0 :                     ; colors for sprites
(1)  202/       0 : =0H                  col_spr_black	equ	00h << 3
(1)  203/       0 : =8H                  col_spr_red	equ	01h << 3
(1)  204/       0 : =10H                 col_spr_green	equ	02h << 3
(1)  205/       0 : =18H                 col_spr_yellow	equ	03h << 3
(1)  206/       0 : =20H                 col_spr_blue	equ	04h << 3
(1)  207/       0 : =28H                 col_spr_violet	equ	05h << 3
(1)  208/       0 : =30H                 col_spr_cyan	equ	06h << 3
(1)  209/       0 : =38H                 col_spr_white	equ	07h << 3
(1)  210/       0 :                     
(1)  211/       0 :                     ; the colors for the grid
(1)  212/       0 : =0H                  col_grd_black	equ	00h
(1)  213/       0 : =1H                  col_grd_blue	equ	01h
(1)  214/       0 : =2H                  col_grd_green	equ	02h
(1)  215/       0 : =3H                  col_grd_cyan	equ	03h
(1)  216/       0 : =4H                  col_grd_red	equ	04h
(1)  217/       0 : =5H                  col_grd_violet	equ	05h
(1)  218/       0 : =6H                  col_grd_yellow	equ	06h
(1)  219/       0 : =7H                  col_grd_white	equ	07h
(1)  220/       0 :                     
(1)  221/       0 :                     ; colors for the grid
(1)  222/       0 : =0H                  col_bck_black	equ	00h << 3
(1)  223/       0 : =8H                  col_bck_blue	equ	01h << 3
(1)  224/       0 : =10H                 col_bck_green	equ	02h << 3
(1)  225/       0 : =18H                 col_bck_cyan	equ	03h << 3
(1)  226/       0 : =20H                 col_bck_red	equ	04h << 3
(1)  227/       0 : =28H                 col_bck_violet	equ	05h << 3
(1)  228/       0 : =30H                 col_bck_yellow	equ	06h << 3
(1)  229/       0 : =38H                 col_bck_white	equ	07h << 3
(1)  230/       0 :                     ; use this to make the grid brighter
(1)  231/       0 : =40H                 col_grd_lum	equ	040h
(1)  232/       0 :                     
(1)  233/       0 :                     ; the locations in internal ram
(1)  234/       0 : =3DH                 iram_collision	equ	03Dh
(1)  235/       0 : =3EH                 iram_clock	equ	03Eh
(1)  236/       0 : =3FH                 iram_irqctrl	equ	03Fh
(1)  237/       0 :                     
 AS V1.42 Beta [Bld 213] - Source File main.asm(g7000.h) - Page 5 - 01/10/2022 00:51:37


(1)  238/       0 :                     ; some bits in the iram
(1)  239/       0 :                     ; iram_clock
(1)  240/       0 : =80H                 clock_stop	equ	080h
(1)  241/       0 : =40H                 clock_forward	equ	040h
(1)  242/       0 :                     ; iram_irqctrl
(1)  243/       0 : =80H                 irq_table	equ	080h
(1)  244/       0 : =40H                 irq_sound	equ	040h
(1)  245/       0 :                     
(1)  246/       0 :                     ; the locations in external ram
(1)  247/       0 : =1H                  eram_minutes	equ	001h
(1)  248/       0 : =2H                  eram_seconds	equ	002h
(1)  249/       0 :                     
(1)  250/       0 :                     ; the builtin tunes
(1)  251/       0 : =28H                 tune_beep_error	equ	028h
(1)  252/       0 : =2EH                 tune_explode	equ	02Eh
(1)  253/       0 : =3CH                 tune_alarm	equ	03Ch
(1)  254/       0 : =4AH                 tune_select	equ	04Ah
(1)  255/       0 : =56H                 tune_keyclick	equ	056h
(1)  256/       0 : =5AH                 tune_buzz	equ	05Ah
(1)  257/       0 : =5EH                 tune_select2	equ	05Eh
(1)  258/       0 : =6AH                 tune_shoot	equ	06Ah
(1)  259/       0 :                     
(1)  260/       0 :                     ; BIOS routines for Videopac+ G7400
(1)  261/       0 : =27DH                plusready	equ	027Dh
(1)  262/       0 : =283H                plusloadr	equ	0283h
(1)  263/       0 : =288H                pluscmd		equ	0288h
(1)  264/       0 : =28CH                plusdata	equ	028Ch
(1)  265/       0 : =296H                plushide	equ	0296h
(1)  266/       0 : =299H                plusmode	equ	0299h
(1)  267/       0 : =2A1H                plusenable	equ	02A1h
(1)  268/       0 : =2ABH                plusstart	equ	02ABh
(1)  269/       0 : =2C2H                plusselectgame	equ	02C2h
(1)  270/       0 :                     
(1)  271/       0 :                     ; registers of the EF9340/41
(1)  272/       0 : =0H                  vpp_ta_wr	equ	0
(1)  273/       0 : =1H                  vpp_tb_wr	equ	1
(1)  274/       0 : =2H                  vpp_ta_cmd	equ	2
(1)  275/       0 : =3H                  vpp_tb_cmd	equ	3
(1)  276/       0 : =4H                  vpp_ta_rd	equ	4
(1)  277/       0 : =5H                  vpp_tb_rd	equ	5
(1)  278/       0 : =6H                  vpp_busy	equ	6
(1)  279/       0 :                     ; 7 is illegal
(1)  280/       0 :                     
(1)  281/       0 :                     ; commandbytes for the Videopac+ G7400
(1)  282/       0 : =0H                  plus_cmd_brow	equ	000h	; begin row
(1)  283/       0 : =20H                 plus_cmd_loady	equ	020h	; load Y
(1)  284/       0 : =40H                 plus_cmd_loadx	equ	040h	; load X
(1)  285/       0 : =60H                 plus_cmd_incc	equ	060h	; inc C
(1)  286/       0 : =80H                 plus_cmd_loadm	equ	080h	; load M
(1)  287/       0 : =0A0H                plus_cmd_loadr	equ	0A0h	; load R
(1)  288/       0 : =0C0H                plus_cmd_loady0	equ	0C0h	; load Y0
(1)  289/       0 :                     
(1)  290/       0 :                     ; parallel attributes for the Videopac+ G7400
(1)  291/       0 :                     ; foreground color
(1)  292/       0 : =0H                  col_plus_black	equ	0
(1)  293/       0 : =1H                  col_plus_red	equ	1
(1)  294/       0 : =2H                  col_plus_green	equ	2
(1)  295/       0 : =3H                  col_plus_yellow	equ	3
(1)  296/       0 : =4H                  col_plus_blue	equ	4
(1)  297/       0 : =5H                  col_plus_violet	equ	5
 AS V1.42 Beta [Bld 213] - Source File main.asm(g7000.h) - Page 6 - 01/10/2022 00:51:37


(1)  298/       0 : =6H                  col_plus_cyan	equ	6
(1)  299/       0 : =7H                  col_plus_white	equ	7
(1)  300/       0 :                     ; background color, only parallel for block gfx
(1)  301/       0 : =0H                  col_pbck_black	equ	0 << 4
(1)  302/       0 : =10H                 col_pbck_red	equ	1 << 4
(1)  303/       0 : =20H                 col_pbck_green	equ	2 << 4
(1)  304/       0 : =30H                 col_pbck_yellow	equ	3 << 4
(1)  305/       0 : =40H                 col_pbck_blue	equ	4 << 4
(1)  306/       0 : =50H                 col_pbck_violet	equ	5 << 4
(1)  307/       0 : =60H                 col_pbck_cyan	equ	6 << 4
(1)  308/       0 : =70H                 col_pbck_white	equ	7 << 4
(1)  309/       0 :                     ; other parallel attributes
(1)  310/       0 : =80H                 col_patr_blck	equ	080h	; block gfx
(1)  311/       0 : =40H                 col_patr_invrt	equ	040h	; invert
(1)  312/       0 : =20H                 col_patr_dwdth	equ	020h	; double width
(1)  313/       0 : =10H                 col_patr_dhght	equ	010h	; double height
(1)  314/       0 : =8H                  col_patr_stable	equ	008h	; do not blink
(1)  315/       0 :                     
(1)  316/       0 :                     ; serial attributes
(1)  317/       0 :                     ; other serial attributes
(1)  318/       0 : =80H                 col_satr_enable	equ	080h	; enable serial attributes
(1)  319/       0 : =4H                  col_satr_line	equ	004h	; underline
(1)  320/       0 : =2H                  col_satr_box	equ	002h	; boxing mode
(1)  321/       0 : =1H                  col_satr_conc	equ	001h	; conceal mode
(1)  322/       0 :                     
(1)  323/       0 :                     ; block gfx
(1)  324/       0 : =40H                 plus_blck_full	equ	040h	; use full blocks
(1)  325/       0 :                     
(1)  326/       0 :                     ; parameter for plus_cmd_loadm
(1)  327/       0 : =0H                  plus_loadm_wr	equ	000h	; write
(1)  328/       0 : =20H                 plus_loadm_rd	equ	020h	; read
(1)  329/       0 : =40H                 plus_loadm_wrni	equ	040h	; write without inc
(1)  330/       0 : =60H                 plus_loadm_rdni	equ	060h	; read without inc
(1)  331/       0 : =80H                 plus_loadm_wrsl	equ	080h	; write slice
(1)  332/       0 : =0A0H                plus_loadm_rdsl	equ	0A0h	; read slice
(1)  333/       0 :                     
(1)  334/       0 :                     ; parameter for plus_cmd_loadr
(1)  335/       0 : =80H                 plus_loadr_blnk	equ	080h	; enable blink
(1)  336/       0 : =40H                 plus_loadr_tt	equ	040h	; 50/60 Hz, handled by plusloadr
(1)  337/       0 : =20H                 plus_loadr_tl	equ	020h	; monitor mode, leave 0
(1)  338/       0 : =10H                 plus_loadr_crsr	equ	010h	; display cursor
(1)  339/       0 : =8H                  plus_loadr_srow	equ	008h	; service row (first line)
(1)  340/       0 : =4H                  plus_loadr_conc	equ	004h	; show concealed
(1)  341/       0 : =2H                  plus_loadr_box	equ	002h	; box mode enable
(1)  342/       0 : =1H                  plus_loadr_dspl	equ	001h	; show display
(1)  343/       0 :                     
(1)  344/       0 :                     ; parameter for plus_cmd_loady0
(1)  345/       0 : =20H                 plus_loady0_zom	equ	020h	; global double height
(1)  346/       0 :                     
(1)  347/       0 :                     ; registers for the MegaCART/FlashCART, mirrored every 4 bytes
(1)  348/       0 : =80H                 ereg_codebank	equ	080h	; code bank
(1)  349/       0 : =81H                 ereg_databank	equ	081h	; data bank
(1)  350/       0 : =82H                 ereg_io_out	equ	082h	; output port
(1)  351/       0 : =83H                 ereg_io_in	equ	083h	; input port
(1)  352/       0 :                     
(1)  353/       0 :                     ; bits in ereg_io_out
(1)  354/       0 : =1H                  eout_tx		equ	001h	; send data from FlashCART to PC
(1)  355/       0 : =2H                  eout_eecs	equ	002h	; chip select for serial EEPROM
(1)  356/       0 : =4H                  eout_eeclk	equ	004h	; clock for serial EEPROM
(1)  357/       0 : =8H                  eout_eedi	equ	008h	; data for serial EEPROM
 AS V1.42 Beta [Bld 213] - Source File main.asm(g7000.h) - Page 7 - 01/10/2022 00:51:37


(1)  358/       0 :                     
(1)  359/       0 :                     ; bits in ereg_io_in
(1)  360/       0 : =1H                  ein_eedo	equ	001h	; data from serial EEPROM
(1)  361/       0 :                     
       4/       0 :                             include	"codepage.h"
(1)    1/       0 :                     ; http://www.atarihq.com/danb/files/o2doc.pdf#page=13&zoom=auto,-175,781
(1)    2/       0 :                     
(1)    3/       0 :                             codepage videopac
(1)    4/       0 :                     
(1)    5/       0 :                             charset '0',000h
(1)    6/       0 :                             charset '1',001h
(1)    7/       0 :                             charset '2',002h
(1)    8/       0 :                             charset '3',003h
(1)    9/       0 :                             charset '4',004h
(1)   10/       0 :                             charset '5',005h
(1)   11/       0 :                             charset '6',006h
(1)   12/       0 :                             charset '7',007h
(1)   13/       0 :                             charset '8',008h
(1)   14/       0 :                             charset '9',009h
(1)   15/       0 :                             charset 'A',020h
(1)   16/       0 :                             charset 'B',025h
(1)   17/       0 :                             charset 'C',023h
(1)   18/       0 :                             charset 'D',01ah
(1)   19/       0 :                             charset 'E',012h
(1)   20/       0 :                             charset 'F',01bh
(1)   21/       0 :                             charset 'G',01ch
(1)   22/       0 :                             charset 'H',01dh
(1)   23/       0 :                             charset 'I',016h
(1)   24/       0 :                             charset 'J',01eh
(1)   25/       0 :                             charset 'K',01fh
(1)   26/       0 :                             charset 'L',00eh
(1)   27/       0 :                             charset 'M',026h
(1)   28/       0 :                             charset 'N',02dh
(1)   29/       0 :                             charset 'O',017h
(1)   30/       0 :                             charset 'P',00fh
(1)   31/       0 :                             charset 'Q',018h
(1)   32/       0 :                             charset 'R',013h
(1)   33/       0 :                             charset 'S',019h
(1)   34/       0 :                             charset 'T',014h
(1)   35/       0 :                             charset 'U',015h
(1)   36/       0 :                             charset 'V',024h
(1)   37/       0 :                             charset 'W',011h
(1)   38/       0 :                             charset 'X',022h
(1)   39/       0 :                             charset 'Y',02ch
(1)   40/       0 :                             charset 'Z',021h
(1)   41/       0 :                             charset ' ',00ch
(1)   42/       0 :                             charset ':',00ah
(1)   43/       0 :                             charset '$',00bh
(1)   44/       0 :                             charset '?',00dh
(1)   45/       0 :                             charset '+',010h
(1)   46/       0 :                             charset '.',027h
(1)   47/       0 :                             charset '-',028h
(1)   48/       0 :                             charset '*',029h
(1)   49/       0 :                             charset '=',02bh
(1)   50/       0 :                             charset '/',02eh
(1)   51/       0 :                             charset '\\',03bh
(1)   52/       0 :                     
       5/       0 :                             include "bitfuncs.inc"
(1)    1/       0 : =>UNDEFINED          		ifndef   bitfuncsinc    ; avoid multiple inclusion
(1)    2/       0 : =1H                  bitfuncsinc     equ      1
 AS V1.42 Beta [Bld 213] - Source File main.asm(bitfuncs.inc) - Page 8 - 01/10/2022 00:51:37


(1)    3/       0 :                     
(1)    4/       0 :                                     save
(1)   77/       0 : ALL                                  restore                 ; allow listing again
(1)   78/       0 :                     
(1)   79/       0 : [1]                                  endif			; bitfuncsinc
(1)   80/       0 :                     
(1)   81/       0 :                     
       6/       0 :                     
       7/       0 :                     ;-----------------
       8/       0 :                     ; Macros
       9/       0 :                     ;-----------------
      10/       0 :                     
      11/       0 :                     ; Turn on debugging colors
      12/       0 :                     ; DEBUG_COLORS equ 1
      13/       0 :                     
      14/       0 :                     inline_external_vdc macro
      15/       0 :                             orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
      16/       0 :                             anl p1,#0b7h                      ; clear : !vdcen copyen (?)
      17/       0 :                         endm
      18/       0 :                     
      19/       0 :                     inline_external_ram macro
      20/       0 :                             orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
      21/       0 :                             anl p1,#0afh                      ; clear : !ramen copyen
      22/       0 :                         endm
      23/       0 :                     
      24/       0 :                     disable_vdc_foreground macro
      25/       0 :                             mov r0, #0a0h
      26/       0 :                             mov a,#8|128
      27/       0 :                             movx @r0,a
      28/       0 :                         endm
      29/       0 :                     
      30/       0 :                     enable_vdc_foreground macro
      31/       0 :                             mov r0, #0a0h
      32/       0 :                             mov a,#8|32|128
      33/       0 :                             movx @r0,a
      34/       0 :                         endm
      35/       0 :                     
      36/       0 :                     calc_char_2 function c, color, row, lo((c << 3) - 16 - (row*10))
      37/       0 :                     calc_char_3 function c, color, row, col | getbit((c << 3) - 16 - (row*10), 8)
      38/       0 :                     
      39/       0 :                     sleep_nop macro count
      40/       0 :                         rept count
      41/       0 :                             nop
      42/       0 :                         endm
      43/       0 :                         endm
      44/       0 :                     
      45/       0 :                     sleep_loop macro reg, count
      46/       0 :                         if count < 5
      47/       0 :                             sleep_nop count
      48/       0 :                         else
      49/       0 :                             if ((count - 2) # 2) == 1
      50/       0 :                                 nop
      51/       0 :                             endif
      52/       0 :                                 mov reg,#((count - 2) / 2)
      53/       0 :                             -:
      54/       0 :                                 djnz reg,-
      55/       0 :                         endif
      56/       0 :                         endm
      57/       0 :                     
      58/       0 : =0H                  TILE_WHITE      equ 00b
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 9 - 01/10/2022 00:51:37


      59/       0 : =1H                  TILE_RED        equ 01b
      60/       0 : =2H                  TILE_GREEN      equ 10b
      61/       0 : =3H                  TILE_BLUE       equ 11b
      62/       0 :                     
      63/       0 :                     read_extram_char macro x, y
      64/       0 :                             mov r0, #x + (y * 12)
      65/       0 :                             movx a, @r0
      66/       0 :                             rr a
      67/       0 :                             rr a
      68/       0 :                             rr a
      69/       0 :                             anl a, #00111111b
      70/       0 :                         endm
      71/       0 :                     
      72/       0 :                     calc_extram_char function char, color, rotln((char << 2) | color, 8, 1)
      73/       0 :                     
      74/       0 :                     write_extram_char macro char, x, y, color
      75/       0 :                             mov a, #rotln((char << 2) | color, 8, 1)
      76/       0 :                             mov r0, #x + (y * 12)
      77/       0 :                             movx @r0, a
      78/       0 :                         endm
      79/       0 :                     
      80/       0 :                     write_extram_string macro str, x, y, color
      81/       0 :                             mov r0, #x + (y * 12)
      82/       0 :                     .cnt set 0
      83/       0 :                             while .cnt < STRLEN(str)
      84/       0 :                                 mov a, #rotln(lo(SUBSTR(str, .cnt, 1) << 2) | color, 8, 1)
      85/       0 :                                 movx @r0, a
      86/       0 :                                 inc r0
      87/       0 :                     .cnt set .cnt + 1
      88/       0 :                             endm
      89/       0 :                         endm
      90/       0 :                     
      91/       0 :                     assert macro expr
      92/       0 :                             if (~~val(expr))
      93/       0 :                                 error expr
      94/       0 :                             endif
      95/       0 :                         endm
      96/       0 :                     
      97/       0 :                     ;-----------------
      98/       0 :                     ; Internal RAM values
      99/       0 :                     ;-----------------
     100/       0 :                     
     101/       0 : =20H                 iram_tile_compute_start     equ 020h
     102/       0 : =33H                 iram_tile_compute_end       equ 033h
     103/       0 : =34H                 iram_rewrite_start          equ 034h
     104/       0 : =37H                 iram_rewrite_end            equ 037h
     105/       0 : =38H                 iram_vblank_bkp_a           equ 038h
     106/       0 : =39H                 iram_vblank_bkp_p1          equ 039h
     107/       0 : =3AH                 iram_iram_index             equ 03ah
     108/       0 : =3BH                 iram_keyboard               equ 03bh
     109/       0 :                     
     110/       0 :                     ; unused
     111/       0 : =3CH                 iram_ictrl	    equ	03ch	    ; control irq
     112/       0 : =3DH                 iram_random     equ 03dh
     113/       0 :                     ; 03d-03f are reserved from BIOS
     114/       0 :                     
     115/       0 :                     ; Flag values
     116/       0 : =80H                 ictrl_nextframe	            equ	080h	    ; if set, do the blinking
     117/       0 : =40H                 ictrl_lineirq	            equ	040h	    ; if set, do the lineirq
     118/       0 : =20H                 ictrl_gameover              equ 020h        ; if set, game over
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 10 - 01/10/2022 00:51:37


     119/       0 :                     
     120/       0 :                     
     121/       0 : =68H                 TEXT_XPOS       equ 68h
     122/       0 : =28H                 TEXT_XPOS2      equ 28h
     123/       0 :                     
     124/       0 :                     ; Y offsets
     125/       0 : =0CH                 TEXT_HI_YPOS                    equ 0x0c
     126/       0 : =0FFFFFFFFFFFFFFF0H  TIMING_Y_START_OFFSET           equ -((TEXT_HI_YPOS / 2) + 10)
     127/       0 : =0F4H                TIMING_SCANLINE_START           equ 0x100 - TEXT_HI_YPOS
     128/       0 :                     
     129/       0 :                     ; Timing constants for kernel
     130/       0 : =13H                 TIMING_CYCLES_TO_FIRST_ROW      equ 19
     131/       0 : =29H                 TIMING_AFTER_COMPUTE            equ 41
     132/       0 : =4H                  TIMING_VDC_WRITE_PADDING        equ 4
     133/       0 :                     
     134/       0 :                     
     135/       0 :                     ;-----------------
     136/       0 :                     ; Program start
     137/       0 :                     ;-----------------
     138/       0 :                     
     139/     400 :                             org	400h
     140/     400 :                     
     141/     400 : 44 C3                       jmp	selectgame	; RESET
     142/     402 : 04 09                       jmp	irq		    ; interrupt
     143/     404 : A4 90                       jmp	timeirq		; timer
     144/     406 : 84 C0                       jmp	myvsyncirq	; VSYNC-interrupt
     145/     408 : 84 0C                       jmp	bank0_start	; after selectgame
     146/     40A : 04 44                       jmp	soundirq	; sound-interrupt
     147/     40C :                     
     148/     40C :                     bank0_start:
     149/     40C :                             ; initialise variables
     150/     40C : B8 3C                       mov	r0,#iram_ictrl
     151/     40E : 23 00                       mov	a,#0		; don't blink yet
     152/     410 : A0                          mov	@r0,a
     153/     411 :                     
     154/     411 :                             ; activate line irq
     155/     411 : B8 3C                       mov	r0,#iram_ictrl
     156/     413 : 23 40                       mov	a,#ictrl_lineirq
     157/     415 : A0                          mov	@r0,a
     158/     416 :                     
     159/     416 :                             ; turn grid gfx off, the bios-routine is not safe
     160/     416 :                             ; to use in irq, it leaves with RB1 and EN I
     161/     416 : C5                          sel rb0
     162/     417 : B8 A0                       mov	r0,#vdc_control
     163/     419 : 80                          movx	a,@r0
     164/     41A :                             ; mov	@r1,a		; store old vdc_control
     165/     41A : 43 82                       orl	a,#2 | 080h
     166/     41C : 90                          movx	@r0,a
     167/     41D : D5                          sel rb1
     168/     41E :                     
     169/     41E :                             ; Prepare for graphics initialization
     170/     41E : 34 1C                       call	gfxoff
     171/     420 :                     
     172/     420 :                     
     173/     420 :                             ; Write some characters to display on-screen
     174/     420 :                     write_extram_char_bytes:
     175/     420 : (MACRO)                      inline_external_ram
     175/     420 : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     175/     422 : 99 AF                       anl p1,#0afh                      ; clear : !ramen copyen
     176/     424 :                         
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 11 - 01/10/2022 00:51:37


     177/     424 : BA 70                       mov r2, #112
     178/     426 :                         .write_to_external_ram:
     179/     426 : FA                          mov a, r2
     180/     427 : 07                          dec a
     181/     428 : A8                          mov r0, a
     182/     429 : FA                          mov a, r2
     183/     42A : 07                          dec a
     184/     42B :                             ; mov a, #55
     185/     42B : 23 0C                       mov a, #' '
     186/     42D :                             ; anl a, #63
     187/     42D : E7                          rl a
     188/     42E : E7                          rl a
     189/     42F :                             ; orl a, #2     ; make it green
     190/     42F : E7                          rl a
     191/     430 : 90                          movx @r0, a
     192/     431 :                         .also_check_if_not_zero:
     193/     431 : EA 26                       djnz r2, .write_to_external_ram
     194/     433 :                     
     195/     433 : (MACRO)                      inline_external_vdc
     195/     433 : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     195/     435 : 99 B7                       anl p1,#0b7h                      ; clear : !vdcen copyen (?)
     196/     437 :                     
     197/     437 :                     
     198/     437 :                     init_grid:
     199/     437 :                             ; Initialize the vertical grid which serves as our full color background
     200/     437 : B8 E2                       mov	r0, #vdc_gridv0+2
     201/     439 : BA 06                       mov	r2, #6
     202/     43B :                         .loopgv:
     203/     43B : 23 7E                       mov	a, #01111110b		; get value
     204/     43D : 90                          movx @r0,a		    ; store in vdc
     205/     43E : 18                          inc	r0
     206/     43F : EA 3B                       djnz r2, .loopgv
     207/     441 :                     
     208/     441 :                     init_text:
     209/     441 :                             ; Draw text
     210/     441 :                             ; call draw_helloworld
     211/     441 : 94 48                       call draw_helloworld
     212/     443 :                     
     213/     443 :                             ; Re-enable graphics
     214/     443 : 34 27                       call gfxon
     215/     445 :                     
     216/     445 :                             ; Start program
     217/     445 : F5 04 00                    jmp main
     218/     448 :                     
     219/     448 :                     
     220/     448 :                     ;------------------------------
     221/     448 :                     ; Quads and text
     222/     448 :                     ;------------------------------
     223/     448 :                     
     224/     448 :                     draw_helloworld:
     225/     448 : B8 40                       mov     r0,#vdc_quad0       ; start char
     226/     44A : BB 28                       mov     r3,#TEXT_XPOS2       ; x-position
     227/     44C : BC 20                       mov     r4,#TEXT_HI_YPOS+20    ; y-position
     228/     44E : BA 0C                       mov     r2,#0ch             ; length
     229/     450 : B9 B0                       mov     r1,#hellostr & 0FFh ; the string to print
     230/     452 :                                                         ; must be in the same page
     231/     452 :                         .loop:
     232/     452 : F9                          mov     a,r1                ; get pointer
     233/     453 : A3                          movp    a,@a                ; get char
     234/     454 : AD                          mov     r5,a                ; into to right register
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 12 - 01/10/2022 00:51:37


     235/     455 : 19                          inc     r1                  ; advance pointer
     236/     456 : BE 0E                       mov     r6,#col_chr_white   ; colour
     237/     458 : 74 EA                       call    printchar           ; print it
     238/     45A : EA 52                       djnz    r2,.loop             ; do it again
     239/     45C :                     
     240/     45C : 23 68                       mov     a,#TEXT_XPOS       ; x-position
     241/     45E : B8 6D                       mov     r0,#vdc_quad2+12+1
     242/     460 : 90                          movx     @r0, a
     243/     461 :                     
     244/     461 : =>UNDEFINED              ifdef DEBUG_COLORS
     245/     461 :                             mov a, #1101b
     246/     461 : =>TRUE                   else
     247/     461 : 23 00                       mov a, #0000b
     248/     463 : [244]                    endif
     249/     463 : B8 6B                       mov r0, #vdc_quad2+8+3
     250/     465 : 90                          movx @r0,a
     251/     466 : B8 6F                       mov r0, #vdc_quad2+12+3
     252/     468 : 90                          movx @r0,a
     253/     469 :                     
     254/     469 :                         ; ifdef DEBUG_COLORS
     255/     469 :                         ;     ; draw a white block at the top left using the unused quad
     256/     469 :                         ;     ; to show when VDC writing ends
     257/     469 :                         ;     ; (this won't work on a real console since it uses overlap)
     258/     469 :                         ;     mov     r0,#vdc_quad3+0       ; last quad char
     259/     469 :                         ;     mov     r3,#24                  ; x-position
     260/     469 :                         ;     mov     r4,#TEXT_HI_YPOS + 20    ; y-position
     261/     469 :                         ;     mov     r5,#47
     262/     469 :                         ;     call printchar
     263/     469 :                         ;     mov     r0,#vdc_quad3+4       ; last quad char
     264/     469 :                         ;     mov     r4,#TEXT_HI_YPOS + 20    ; y-position
     265/     469 :                         ;     mov     r5,#' '
     266/     469 :                         ;     call printchar
     267/     469 :                         ;     mov     r0,#vdc_quad3+8       ; last quad char
     268/     469 :                         ;     mov     r4,#TEXT_HI_YPOS + 20    ; y-position
     269/     469 :                         ;     mov     r5,#' '
     270/     469 :                         ;     call printchar
     271/     469 :                         ;     mov     r0,#vdc_quad3+12       ; last quad char
     272/     469 :                         ;     mov     r4,#TEXT_HI_YPOS + 20    ; y-position
     273/     469 :                         ;     mov     r5,#' '
     274/     469 :                         ;     call printchar
     275/     469 :                         ; endif
     276/     469 :                     
     277/     469 : B8 70                       mov     r0,#vdc_quad3+0
     278/     46B : BB 70                       mov     r3,#112
     279/     46D : BC 98                       mov     r4,#TEXT_HI_YPOS + (20 * 7)    ; y-position
     280/     46F : BD 20                       mov     r5,#'A'
     281/     471 : 74 EA                       call printchar
     282/     473 :                     
     283/     473 : B8 78                       mov     r0,#vdc_quad3+8
     284/     475 : BB 70                       mov     r3,#112
     285/     477 : BC 98                       mov     r4,#TEXT_HI_YPOS + (20 * 7)    ; y-position
     286/     479 : BD 0C                       mov     r5,#' '
     287/     47B : 74 EA                       call printchar
     288/     47D :                     
     289/     47D : B8 7C                       mov     r0,#vdc_quad3+12
     290/     47F : BB 70                       mov     r3,#112
     291/     481 : BC 98                       mov     r4,#TEXT_HI_YPOS + (20 * 7)    ; y-position
     292/     483 : BD 0C                       mov     r5,#' '
     293/     485 : 74 EA                       call printchar
     294/     487 :                     
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 13 - 01/10/2022 00:51:37


     295/     487 :                             ; Position the twelve chars for columns 9 of 12
     296/     487 : B8 10                       mov r0, #vdc_char0
     297/     489 : B9 0C                       mov r1, #TEXT_HI_YPOS
     298/     48B : BA 06                       mov r2, #6
     299/     48D :                         .column_9:
     300/     48D : BB 70                       mov r3, #112       ; x-position
     301/     48F : 23 14                       mov a, #20
     302/     491 : 69                          add a, r1
     303/     492 : A9                          mov r1, a
     304/     493 : AC                          mov r4, a
     305/     494 : BD 2F                       mov r5, #47
     306/     496 : 74 EA                       call printchar
     307/     498 : 1B                          inc r3
     308/     499 : EA 8D                       djnz r2, .column_9
     309/     49B :                     
     310/     49B :                             ; Position the twelve chars for columns 11 of 12
     311/     49B : B8 28                       mov r0, #vdc_char6
     312/     49D : B9 0C                       mov r1, #TEXT_HI_YPOS
     313/     49F : BA 06                       mov r2, #6
     314/     4A1 :                         .column_11:
     315/     4A1 : BB 80                       mov r3, #128        ; x-position
     316/     4A3 : 23 14                       mov a, #20
     317/     4A5 : 69                          add a, r1
     318/     4A6 : A9                          mov r1, a
     319/     4A7 : AC                          mov r4, a
     320/     4A8 : BD 2F                       mov r5, #47
     321/     4AA : 74 EA                       call printchar
     322/     4AC : 1B                          inc r3
     323/     4AD : EA A1                       djnz r2, .column_11
     324/     4AF :                     
     325/     4AF : 93                          retr
     326/     4B0 :                     
     327/     4B0 :                     
     328/     4B0 :                     hellostr
     329/     4B0 : 23 20 20 14 1D 13           db      "CAATHRCER1234"
              4B6 : 23 12 13 01 02 03 
              4BC : 04                
     330/     4BD :                     
     331/     4BD :                     ;----------------------
     332/     4BD :                     ; VSync IRQ
     333/     4BD :                     ;----------------------
     334/     4BD :                     
     335/     4BD :                             align 16
     336/     4C0 :                     
     337/     4C0 :                     ; it starts the lineirq and does the blinking
     338/     4C0 :                     myvsyncirq
     339/     4C0 :                             ; start lineirq, if needed
     340/     4C0 : B8 3C                       mov	r0,#iram_ictrl	; control register
     341/     4C2 : F0                          mov	a,@r0
     342/     4C3 : 37                          cpl	a
     343/     4C4 : D2 C8                       jb6	.skip_line_irq	; should we start line irq ?
     344/     4C6 : 84 CF                       jmp .setup_frame
     345/     4C8 :                     
     346/     4C8 :                         .skip_line_irq:
     347/     4C8 :                             ; set grid+background color
     348/     4C8 : B8 A3                       mov	r0,#vdc_color
     349/     4CA : 23 0D                       mov	a,#col_grd_violet | col_bck_blue
     350/     4CC : 90                          movx	@r0,a
     351/     4CD :                     
     352/     4CD : 04 1A                       jmp	vsyncirq	; thats all for now
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 14 - 01/10/2022 00:51:37


     353/     4CF :                     
     354/     4CF :                         .setup_frame:
     355/     4CF : F0                          mov	a,@r0
     356/     4D0 : 23 F4                       mov	a,#TIMING_SCANLINE_START		; middle of the screen
     357/     4D2 : 62                          mov	t,a		    ; set # of lines to wait
     358/     4D3 : 45                          strt	cnt		; start line counting
     359/     4D4 : 25                          en	tcnti		; enable timer irq
     360/     4D5 :                     
     361/     4D5 :                             ; select base register set(?)
     362/     4D5 : C5                          sel	rb0
     363/     4D6 :                     
     364/     4D6 :                             ; set grid+background color
     365/     4D6 : B8 A3                       mov	r0,#vdc_color
     366/     4D8 : 23 10                       mov	a,#col_grd_black | col_bck_green
     367/     4DA : 90                          movx	@r0,a
     368/     4DB :                     
     369/     4DB :                             ; Clear sound registers
     370/     4DB : 27                          clr a
     371/     4DC : B8 3F                       mov r0, #iram_irqctrl
     372/     4DE : A0                          mov @r0, a
     373/     4DF : B8 AA                       mov r0, #vdc_soundctrl
     374/     4E1 : 90                          movx @r0, a
     375/     4E2 :                     
     376/     4E2 :                             ; Read joystick bit pattern
     377/     4E2 : B9 00                       mov r1, #0
     378/     4E4 : 74 8F                       call getjoystick
     379/     4E6 : F9                          mov a, r1
     380/     4E7 : 37                          cpl a
     381/     4E8 : AA                          mov r2, a
     382/     4E9 : B9 3B                       mov r1, #iram_keyboard
     383/     4EB : F1                          mov a, @r1
     384/     4EC : 4A                          orl a, r2
     385/     4ED : A1                          mov @r1, a
     386/     4EE :                     
     387/     4EE :                             ; Write columns 9 and 11 chars
     388/     4EE :                         .write_individual_chars:
     389/     4EE : (MACRO)                      disable_vdc_foreground
     389/     4EE : B8 A0                       mov r0, #0a0h
     389/     4F0 : 23 88                       mov a,#8|128
     389/     4F2 : 90                          movx @r0,a
     390/     4F3 : 89 7C                       orl p1,#07ch                      ; set : !kbscan !vdcen !ramen copyen
     391/     4F5 : 99 E7                       anl p1,#0e7h                      ; clear : !vdcen !ramen
     392/     4F7 :                     
     393/     4F7 : =0H                  .count set 0
     394/     4F7 :                         while .count < 6
     395/     4F7 :                             ; column 9
     396/     4F7 :                             mov r0, #vdc_char0 + 2 + (.count * 4)
     397/     4F7 :                             mov r1, #9 + (.count * 12)
     398/     4F7 :                             mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     4F7 :                             call compute_char_from_extram
     400/     4F7 :                     
     401/     4F7 :                             ; column 11
     402/     4F7 :                             mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     4F7 :                             mov r1, #11 + (.count * 12)
     404/     4F7 :                             mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     4F7 :                             call compute_char_from_extram
     406/     4F7 :                     .count set .count + 1
     407/     4F7 :                         endm
     395/     4F7 :                             ; column 9
     396/     4F7 : B8 12                       mov r0, #vdc_char0 + 2 + (.count * 4)
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 15 - 01/10/2022 00:51:37


     397/     4F9 : B9 09                       mov r1, #9 + (.count * 12)
     398/     4FB : BD F0                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     4FD : D4 0A                       call compute_char_from_extram
     400/     4FF :                     
     401/     4FF :                             ; column 11
     402/     4FF : B8 2A                       mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     501 : B9 0B                       mov r1, #11 + (.count * 12)
     404/     503 : BD F0                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     505 : D4 0A                       call compute_char_from_extram
     406/     507 : =1H                  .count set .count + 1
     395/     507 :                             ; column 9
     396/     507 : B8 16                       mov r0, #vdc_char0 + 2 + (.count * 4)
     397/     509 : B9 15                       mov r1, #9 + (.count * 12)
     398/     50B : BD E6                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     50D : D4 0A                       call compute_char_from_extram
     400/     50F :                     
     401/     50F :                             ; column 11
     402/     50F : B8 2E                       mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     511 : B9 17                       mov r1, #11 + (.count * 12)
     404/     513 : BD E6                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     515 : D4 0A                       call compute_char_from_extram
     406/     517 : =2H                  .count set .count + 1
     395/     517 :                             ; column 9
     396/     517 : B8 1A                       mov r0, #vdc_char0 + 2 + (.count * 4)
     397/     519 : B9 21                       mov r1, #9 + (.count * 12)
     398/     51B : BD DC                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     51D : D4 0A                       call compute_char_from_extram
     400/     51F :                     
     401/     51F :                             ; column 11
     402/     51F : B8 32                       mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     521 : B9 23                       mov r1, #11 + (.count * 12)
     404/     523 : BD DC                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     525 : D4 0A                       call compute_char_from_extram
     406/     527 : =3H                  .count set .count + 1
     395/     527 :                             ; column 9
     396/     527 : B8 1E                       mov r0, #vdc_char0 + 2 + (.count * 4)
     397/     529 : B9 2D                       mov r1, #9 + (.count * 12)
     398/     52B : BD D2                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     52D : D4 0A                       call compute_char_from_extram
     400/     52F :                     
     401/     52F :                             ; column 11
     402/     52F : B8 36                       mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     531 : B9 2F                       mov r1, #11 + (.count * 12)
     404/     533 : BD D2                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     535 : D4 0A                       call compute_char_from_extram
     406/     537 : =4H                  .count set .count + 1
     395/     537 :                             ; column 9
     396/     537 : B8 22                       mov r0, #vdc_char0 + 2 + (.count * 4)
     397/     539 : B9 39                       mov r1, #9 + (.count * 12)
     398/     53B : BD C8                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     53D : D4 0A                       call compute_char_from_extram
     400/     53F :                     
     401/     53F :                             ; column 11
     402/     53F : B8 3A                       mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     541 : B9 3B                       mov r1, #11 + (.count * 12)
     404/     543 : BD C8                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     545 : D4 0A                       call compute_char_from_extram
     406/     547 : =5H                  .count set .count + 1
     395/     547 :                             ; column 9
     396/     547 : B8 26                       mov r0, #vdc_char0 + 2 + (.count * 4)
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 16 - 01/10/2022 00:51:37


     397/     549 : B9 45                       mov r1, #9 + (.count * 12)
     398/     54B : BD BE                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     399/     54D : D4 0A                       call compute_char_from_extram
     400/     54F :                     
     401/     54F :                             ; column 11
     402/     54F : B8 3E                       mov r0, #vdc_char6 + 2 + (.count * 4)
     403/     551 : B9 47                       mov r1, #11 + (.count * 12)
     404/     553 : BD BE                       mov r5, #TIMING_Y_START_OFFSET - (.count * 10)
     405/     555 : D4 0A                       call compute_char_from_extram
     406/     557 : =6H                  .count set .count + 1
     395/     557 :                     
     408/     557 :                     
     409/     557 :                             ; quad 4 on row 7
     410/     557 : B8 72                       mov r0, #vdc_quad3 + 0 + 2
     411/     559 : B9 51                       mov r1, #9 + (6 * 12)
     412/     55B : BD B4                       mov r5, #TIMING_Y_START_OFFSET - (6 * 10)
     413/     55D : D4 0A                       call compute_char_from_extram
     414/     55F :                             ; quad 4 on row 7
     415/     55F : B8 76                       mov r0, #vdc_quad3 + 4 + 2
     416/     561 : B9 53                       mov r1, #11 + (6 * 12)
     417/     563 : BD B4                       mov r5, #TIMING_Y_START_OFFSET - (6 * 10)
     418/     565 : D4 0A                       call compute_char_from_extram
     419/     567 :                     
     420/     567 :                             ; calculate the last entries for columns 9 and 11
     421/     567 : B8 34                       mov r0, #iram_rewrite_start
     422/     569 : B9 5D                       mov r1, #9 + (7 * 12)
     423/     56B : BD AA                       mov r5, #TIMING_Y_START_OFFSET - (7 * 10)
     424/     56D : D4 1D                       call compute_char_from_extram_mov
     425/     56F : B9 5F                       mov r1, #11 + (7 * 12)
     426/     571 : BD AA                       mov r5, #TIMING_Y_START_OFFSET - (7 * 10)
     427/     573 : D4 1D                       call compute_char_from_extram_mov
     428/     575 :                     
     429/     575 : B8 10                       mov r0, #vdc_char0
     430/     577 : 23 20                       mov a, #TEXT_HI_YPOS + (20 * 1)
     431/     579 : 90                          movx @r0, a
     432/     57A : B8 28                       mov r0, #vdc_char6
     433/     57C : 23 20                       mov a, #TEXT_HI_YPOS + (20 * 1)
     434/     57E : 90                          movx @r0, a
     435/     57F :                     
     436/     57F : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     437/     581 : 99 B7                       anl p1,#0b7h                      ; clear : !vdcen copyen
     438/     583 : (MACRO)                      enable_vdc_foreground
     438/     583 : B8 A0                       mov r0, #0a0h
     438/     585 : 23 A8                       mov a,#8|32|128
     438/     587 : 90                          movx @r0,a
     439/     588 :                     
     440/     588 :                         .continue_vblank_irq:
     441/     588 :                             ; continue BIOS IRQ routine
     442/     588 : 93                          retr
     443/     589 :                     
     444/     589 :                     
     445/     589 :                     ;----------------------
     446/     589 :                     ; Line IRQ
     447/     589 :                     ;----------------------
     448/     589 :                     
     449/     589 :                             align 16
     450/     590 :                     
     451/     590 :                     timeirq:
     452/     590 :                             ; select base register set(?)
     453/     590 : C5                          sel	rb0
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 17 - 01/10/2022 00:51:37


     454/     591 :                             ; stop timer
     455/     591 : 65                          stop	tcnt
     456/     592 :                     
     457/     592 :                             ; backup a
     458/     592 : B8 38                       mov r0, #iram_vblank_bkp_a
     459/     594 : A0                          mov	@r0,a
     460/     595 :                             ; Backup P1
     461/     595 : 09                          in	a,P1
     462/     596 : B8 39                       mov r0, #iram_vblank_bkp_p1
     463/     598 : A0                          mov	@r0,a
     464/     599 :                     
     465/     599 :                             ; Enable VDC in extram
     466/     599 : (MACRO)                      inline_external_vdc
     466/     599 : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     466/     59B : 99 B7                       anl p1,#0b7h                      ; clear : !vdcen copyen (?)
     467/     59D :                     
     468/     59D :                             ; r2 = eventual computed space character for quad2 each row
     469/     59D : BA 00                       mov r2, #0
     470/     59F :                             ; r3 = index into extram
     471/     59F : B8 3A                       mov r0, #iram_iram_index
     472/     5A1 : 23 00                       mov a, #0
     473/     5A3 : A0                          mov @r0, a
     474/     5A4 :                             ; mov r4, #111b
     475/     5A4 :                             ; r5 = "Y offset" to add to VDC character writes
     476/     5A4 : BD F0                       mov r5, #TIMING_Y_START_OFFSET
     477/     5A6 :                             ; r6 = Y position to write to quads
     478/     5A6 : BE 0C                       mov r6, #TEXT_HI_YPOS
     479/     5A8 :                             ; r7 = row counter
     480/     5A8 :                             ; mov r7, #08h
     481/     5A8 :                     
     482/     5A8 :                             ; Wait until the first row should start
     483/     5A8 : (MACRO)                      sleep_loop r0, TIMING_CYCLES_TO_FIRST_ROW
     483/     5A8 : =>FALSE                  if TIMING_CYCLES_TO_FIRST_ROW < 5
     483/     5A8 :                             sleep_nop TIMING_CYCLES_TO_FIRST_ROW
     483/     5A8 : =>TRUE                   else
     483/     5A8 : =>TRUE                       if ((TIMING_CYCLES_TO_FIRST_ROW - 2) # 2) == 1
     483/     5A8 : 00                              nop
     483/     5A9 : [483]                        endif
     483/     5A9 : B8 08                           mov R0,#((TIMING_CYCLES_TO_FIRST_ROW - 2) / 2)
     483/     5AB :                             -:
     483/     5AB : E8 AB                           djnz R0,-
     483/     5AD : [483]                    endif
     484/     5AD :                     
     485/     5AD :                             ; Render all eight rows
     486/     5AD : BB FF                       mov r3, #0ffh
     487/     5AF : BC FF                       mov r4, #0ffh
     488/     5B1 : 00                          nop
     489/     5B2 : 00                          nop
     490/     5B3 : D4 30                       call compute_chars
     491/     5B5 : BB 10                       mov r3, #vdc_char0
     492/     5B7 : BC AC                       mov r4, #TEXT_HI_YPOS + (20 * 8)
     493/     5B9 : 00                          nop
     494/     5BA : 00                          nop
     495/     5BB : D4 30                       call compute_chars
     496/     5BD : BB 28                       mov r3, #vdc_char6
     497/     5BF : BC AC                       mov r4, #TEXT_HI_YPOS + (20 * 8)
     498/     5C1 : 00                          nop
     499/     5C2 : 00                          nop
     500/     5C3 : D4 30                       call compute_chars
     501/     5C5 : BB 12                       mov r3, #vdc_char0+2+0
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 18 - 01/10/2022 00:51:37


     502/     5C7 : B8 34                       mov r0, #iram_rewrite_start+0
     503/     5C9 : F0                          mov a, @r0
     504/     5CA : AC                          mov r4, a
     505/     5CB : D4 30                       call compute_chars
     506/     5CD : BB 13                       mov r3, #vdc_char0+2+1
     507/     5CF : B8 35                       mov r0, #iram_rewrite_start+1
     508/     5D1 : F0                          mov a, @r0
     509/     5D2 : AC                          mov r4, a
     510/     5D3 : D4 30                       call compute_chars
     511/     5D5 : BB 2A                       mov r3, #vdc_char6+2+0
     512/     5D7 : B8 36                       mov r0, #iram_rewrite_start+2
     513/     5D9 : F0                          mov a, @r0
     514/     5DA : AC                          mov r4, a
     515/     5DB : D4 30                       call compute_chars
     516/     5DD : BB 2B                       mov r3, #vdc_char6+2+1
     517/     5DF : B8 37                       mov r0, #iram_rewrite_start+3
     518/     5E1 : F0                          mov a, @r0
     519/     5E2 : AC                          mov r4, a
     520/     5E3 : D4 30                       call compute_chars
     521/     5E5 :                             ; noop
     522/     5E5 : BB FF                       mov r3, #0ffh
     523/     5E7 : BC FF                       mov r4, #0ffh
     524/     5E9 : 00                          nop
     525/     5EA : 00                          nop
     526/     5EB : D4 30                       call compute_chars
     527/     5ED :                     
     528/     5ED :                         .finish_frame:
     529/     5ED :                             ; Set the "frame done" flag
     530/     5ED : B8 3C                       mov r0, #iram_ictrl
     531/     5EF : F0                          mov a, @r0
     532/     5F0 :                             ; orl a, #ictrl_nextframe
     533/     5F0 : 23 FF                       mov a, #$ff
     534/     5F2 : A0                          mov @r0, a
     535/     5F3 :                     
     536/     5F3 :                             ; We're done, reset registers
     537/     5F3 :                             ; Reset P1
     538/     5F3 : B8 39                       mov r0, #iram_vblank_bkp_p1
     539/     5F5 : F0                          mov	a, @r0
     540/     5F6 : 39                          outl	P1,a
     541/     5F7 :                             ; Reset a
     542/     5F7 : B8 38                       mov r0, #iram_vblank_bkp_a
     543/     5F9 : F0                          mov	a,@r0
     544/     5FA :                     
     545/     5FA :                             ; Set extram enabled
     546/     5FA :                             ; TODO: why is this necessary if we cache P1??
     547/     5FA : (MACRO)                      inline_external_ram
     547/     5FA : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     547/     5FC : 99 AF                       anl p1,#0afh                      ; clear : !ramen copyen
     548/     5FE :                     
     549/     5FE : 93                          retr
     550/     5FF :                     
     551/     5FF :                     
     552/     5FF :                     ;------------------------------------------
     553/     5FF :                     ; Compute next row's chars, store in scratchpad ram
     554/     5FF :                     ;------------------------------------------
     555/     5FF :                     
     556/     5FF :                             ; Align to page, since we use "movp a, @a" to lookup constants at start of page
     557/     5FF :                             align 256
     558/     600 :                     
     559/     600 :                     compute_page:
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 19 - 01/10/2022 00:51:37


     560/     600 :                             ; color map from two bit reference => three bit color
     561/     600 :                             ; (we preserve the lowest bit of the three-bit lookup value
     562/     600 :                             ; since it's actually bit 9 of the character value)
     563/     600 : 0E 0F                       db col_chr_white | 0, col_chr_white | 1
     564/     602 : 02 03                       db col_chr_red | 0, col_chr_red | 1
     565/     604 : 04 05                       db col_chr_green | 0, col_chr_green | 1
     566/     606 : 06 07                       db col_chr_yellow | 0, col_chr_yellow | 1
     567/     608 :                     
     568/     608 :                             ; Load color from table
     569/     608 :                             ; a = tile color << 1
     570/     608 :                             ; out a = three bit color << 1
     571/     608 :                     compute_color:
     572/     608 : A3                          movp a, @a
     573/     609 : 93                          retr
     574/     60A :                     
     575/     60A :                     compute_char_macro macro opcode
     576/     60A :                             ; Load character byte (shifted left twice)
     577/     60A :                             movx a, @r1
     578/     60A :                             ; cut out the lower three bits
     579/     60A :                             anl a, #111b
     580/     60A :                             ; lookup in the color table and store temporarily in r7
     581/     60A :                             movp a, @a
     582/     60A :                             mov r7, a
     583/     60A :                     
     584/     60A :                             ; cut out the upper five bits
     585/     60A :                             movx a, @r1
     586/     60A :                             anl a, #11111000b
     587/     60A :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     588/     60A :                             add a, r5
     589/     60A :                             ; write char value to the odd byte
     590/     60A :                             opcode @r0, a
     591/     60A :                             inc r0
     592/     60A :                     
     593/     60A :                             ; xor bit 0 of the color value in r7 with ~carry
     594/     60A :                             cpl c
     595/     60A :                             clr a
     596/     60A :                             rlc a
     597/     60A :                             xrl a, r7
     598/     60A :                             ; write color value to the even byte
     599/     60A :                             opcode @r0, a
     600/     60A :                             inc r0
     601/     60A :                     
     602/     60A :                             ; increment to next byte
     603/     60A :                             inc r1
     604/     60A :                         endm
     605/     60A :                     
     606/     60A :                             ; r0 = vdc pointer
     607/     60A :                             ; r1 = extram lookup
     608/     60A :                             ; r5 = -y/2 offset
     609/     60A :                             ; out r0 = r0 + 2
     610/     60A :                             ; out r1 = r1 + 1
     611/     60A :                             ; out r4 = (trashed)
     612/     60A :                             ; out r5 = r5
     613/     60A :                     compute_char_from_extram:
     614/     60A : (MACRO)                      compute_char_macro movx
     614/     60A :                             ; Load character byte (shifted left twice)
     614/     60A : 81                          movx a, @r1
     614/     60B :                             ; cut out the lower three bits
     614/     60B : 53 07                       anl a, #111b
     614/     60D :                             ; lookup in the color table and store temporarily in r7
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 20 - 01/10/2022 00:51:37


     614/     60D : A3                          movp a, @a
     614/     60E : AF                          mov r7, a
     614/     60F :                     
     614/     60F :                             ; cut out the upper five bits
     614/     60F : 81                          movx a, @r1
     614/     610 : 53 F8                       anl a, #11111000b
     614/     612 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     614/     612 : 6D                          add a, r5
     614/     613 :                             ; write char value to the odd byte
     614/     613 : 90                          MOVX @r0, a
     614/     614 : 18                          inc r0
     614/     615 :                     
     614/     615 :                             ; xor bit 0 of the color value in r7 with ~carry
     614/     615 : A7                          cpl c
     614/     616 : 27                          clr a
     614/     617 : F7                          rlc a
     614/     618 : DF                          xrl a, r7
     614/     619 :                             ; write color value to the even byte
     614/     619 : 90                          MOVX @r0, a
     614/     61A : 18                          inc r0
     614/     61B :                     
     614/     61B :                             ; increment to next byte
     614/     61B : 19                          inc r1
     615/     61C : 93                          retr
     616/     61D :                     
     617/     61D :                     compute_char_from_extram_mov:
     618/     61D : (MACRO)                      compute_char_macro mov
     618/     61D :                             ; Load character byte (shifted left twice)
     618/     61D : 81                          movx a, @r1
     618/     61E :                             ; cut out the lower three bits
     618/     61E : 53 07                       anl a, #111b
     618/     620 :                             ; lookup in the color table and store temporarily in r7
     618/     620 : A3                          movp a, @a
     618/     621 : AF                          mov r7, a
     618/     622 :                     
     618/     622 :                             ; cut out the upper five bits
     618/     622 : 81                          movx a, @r1
     618/     623 : 53 F8                       anl a, #11111000b
     618/     625 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     618/     625 : 6D                          add a, r5
     618/     626 :                             ; write char value to the odd byte
     618/     626 : A0                          MOV @r0, a
     618/     627 : 18                          inc r0
     618/     628 :                     
     618/     628 :                             ; xor bit 0 of the color value in r7 with ~carry
     618/     628 : A7                          cpl c
     618/     629 : 27                          clr a
     618/     62A : F7                          rlc a
     618/     62B : DF                          xrl a, r7
     618/     62C :                             ; write color value to the even byte
     618/     62C : A0                          MOV @r0, a
     618/     62D : 18                          inc r0
     618/     62E :                     
     618/     62E :                             ; increment to next byte
     618/     62E : 19                          inc r1
     619/     62F : 93                          retr
     620/     630 :                     
     621/     630 :                     compute_chars:
     622/     630 :                     
     623/     630 : (MACRO)                      inline_external_ram
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 21 - 01/10/2022 00:51:37


     623/     630 : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     623/     632 : 99 AF                       anl p1,#0afh                      ; clear : !ramen copyen
     624/     634 :                     
     625/     634 : B8 20                       mov r0, #iram_tile_compute_start
     626/     636 : B9 3A                       mov r1, #iram_iram_index
     627/     638 : F1                          mov a, @r1
     628/     639 : A9                          mov r1, a
     629/     63A :                     
     630/     63A :                             ; Compute the next ten characters and store in scratchpad RAM
     631/     63A :                             ; We unroll this loop to save 40 cycles doing call/retr
     632/     63A : (MACRO)                      compute_char_macro mov
     632/     63A :                             ; Load character byte (shifted left twice)
     632/     63A : 81                          movx a, @r1
     632/     63B :                             ; cut out the lower three bits
     632/     63B : 53 07                       anl a, #111b
     632/     63D :                             ; lookup in the color table and store temporarily in r7
     632/     63D : A3                          movp a, @a
     632/     63E : AF                          mov r7, a
     632/     63F :                     
     632/     63F :                             ; cut out the upper five bits
     632/     63F : 81                          movx a, @r1
     632/     640 : 53 F8                       anl a, #11111000b
     632/     642 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     632/     642 : 6D                          add a, r5
     632/     643 :                             ; write char value to the odd byte
     632/     643 : A0                          MOV @r0, a
     632/     644 : 18                          inc r0
     632/     645 :                     
     632/     645 :                             ; xor bit 0 of the color value in r7 with ~carry
     632/     645 : A7                          cpl c
     632/     646 : 27                          clr a
     632/     647 : F7                          rlc a
     632/     648 : DF                          xrl a, r7
     632/     649 :                             ; write color value to the even byte
     632/     649 : A0                          MOV @r0, a
     632/     64A : 18                          inc r0
     632/     64B :                     
     632/     64B :                             ; increment to next byte
     632/     64B : 19                          inc r1
     633/     64C : (MACRO)                      compute_char_macro mov
     633/     64C :                             ; Load character byte (shifted left twice)
     633/     64C : 81                          movx a, @r1
     633/     64D :                             ; cut out the lower three bits
     633/     64D : 53 07                       anl a, #111b
     633/     64F :                             ; lookup in the color table and store temporarily in r7
     633/     64F : A3                          movp a, @a
     633/     650 : AF                          mov r7, a
     633/     651 :                     
     633/     651 :                             ; cut out the upper five bits
     633/     651 : 81                          movx a, @r1
     633/     652 : 53 F8                       anl a, #11111000b
     633/     654 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     633/     654 : 6D                          add a, r5
     633/     655 :                             ; write char value to the odd byte
     633/     655 : A0                          MOV @r0, a
     633/     656 : 18                          inc r0
     633/     657 :                     
     633/     657 :                             ; xor bit 0 of the color value in r7 with ~carry
     633/     657 : A7                          cpl c
     633/     658 : 27                          clr a
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 22 - 01/10/2022 00:51:37


     633/     659 : F7                          rlc a
     633/     65A : DF                          xrl a, r7
     633/     65B :                             ; write color value to the even byte
     633/     65B : A0                          MOV @r0, a
     633/     65C : 18                          inc r0
     633/     65D :                     
     633/     65D :                             ; increment to next byte
     633/     65D : 19                          inc r1
     634/     65E : (MACRO)                      compute_char_macro mov
     634/     65E :                             ; Load character byte (shifted left twice)
     634/     65E : 81                          movx a, @r1
     634/     65F :                             ; cut out the lower three bits
     634/     65F : 53 07                       anl a, #111b
     634/     661 :                             ; lookup in the color table and store temporarily in r7
     634/     661 : A3                          movp a, @a
     634/     662 : AF                          mov r7, a
     634/     663 :                     
     634/     663 :                             ; cut out the upper five bits
     634/     663 : 81                          movx a, @r1
     634/     664 : 53 F8                       anl a, #11111000b
     634/     666 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     634/     666 : 6D                          add a, r5
     634/     667 :                             ; write char value to the odd byte
     634/     667 : A0                          MOV @r0, a
     634/     668 : 18                          inc r0
     634/     669 :                     
     634/     669 :                             ; xor bit 0 of the color value in r7 with ~carry
     634/     669 : A7                          cpl c
     634/     66A : 27                          clr a
     634/     66B : F7                          rlc a
     634/     66C : DF                          xrl a, r7
     634/     66D :                             ; write color value to the even byte
     634/     66D : A0                          MOV @r0, a
     634/     66E : 18                          inc r0
     634/     66F :                     
     634/     66F :                             ; increment to next byte
     634/     66F : 19                          inc r1
     635/     670 : (MACRO)                      compute_char_macro mov
     635/     670 :                             ; Load character byte (shifted left twice)
     635/     670 : 81                          movx a, @r1
     635/     671 :                             ; cut out the lower three bits
     635/     671 : 53 07                       anl a, #111b
     635/     673 :                             ; lookup in the color table and store temporarily in r7
     635/     673 : A3                          movp a, @a
     635/     674 : AF                          mov r7, a
     635/     675 :                     
     635/     675 :                             ; cut out the upper five bits
     635/     675 : 81                          movx a, @r1
     635/     676 : 53 F8                       anl a, #11111000b
     635/     678 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     635/     678 : 6D                          add a, r5
     635/     679 :                             ; write char value to the odd byte
     635/     679 : A0                          MOV @r0, a
     635/     67A : 18                          inc r0
     635/     67B :                     
     635/     67B :                             ; xor bit 0 of the color value in r7 with ~carry
     635/     67B : A7                          cpl c
     635/     67C : 27                          clr a
     635/     67D : F7                          rlc a
     635/     67E : DF                          xrl a, r7
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 23 - 01/10/2022 00:51:37


     635/     67F :                             ; write color value to the even byte
     635/     67F : A0                          MOV @r0, a
     635/     680 : 18                          inc r0
     635/     681 :                     
     635/     681 :                             ; increment to next byte
     635/     681 : 19                          inc r1
     636/     682 : (MACRO)                      compute_char_macro mov
     636/     682 :                             ; Load character byte (shifted left twice)
     636/     682 : 81                          movx a, @r1
     636/     683 :                             ; cut out the lower three bits
     636/     683 : 53 07                       anl a, #111b
     636/     685 :                             ; lookup in the color table and store temporarily in r7
     636/     685 : A3                          movp a, @a
     636/     686 : AF                          mov r7, a
     636/     687 :                     
     636/     687 :                             ; cut out the upper five bits
     636/     687 : 81                          movx a, @r1
     636/     688 : 53 F8                       anl a, #11111000b
     636/     68A :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     636/     68A : 6D                          add a, r5
     636/     68B :                             ; write char value to the odd byte
     636/     68B : A0                          MOV @r0, a
     636/     68C : 18                          inc r0
     636/     68D :                     
     636/     68D :                             ; xor bit 0 of the color value in r7 with ~carry
     636/     68D : A7                          cpl c
     636/     68E : 27                          clr a
     636/     68F : F7                          rlc a
     636/     690 : DF                          xrl a, r7
     636/     691 :                             ; write color value to the even byte
     636/     691 : A0                          MOV @r0, a
     636/     692 : 18                          inc r0
     636/     693 :                     
     636/     693 :                             ; increment to next byte
     636/     693 : 19                          inc r1
     637/     694 : (MACRO)                      compute_char_macro mov
     637/     694 :                             ; Load character byte (shifted left twice)
     637/     694 : 81                          movx a, @r1
     637/     695 :                             ; cut out the lower three bits
     637/     695 : 53 07                       anl a, #111b
     637/     697 :                             ; lookup in the color table and store temporarily in r7
     637/     697 : A3                          movp a, @a
     637/     698 : AF                          mov r7, a
     637/     699 :                     
     637/     699 :                             ; cut out the upper five bits
     637/     699 : 81                          movx a, @r1
     637/     69A : 53 F8                       anl a, #11111000b
     637/     69C :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     637/     69C : 6D                          add a, r5
     637/     69D :                             ; write char value to the odd byte
     637/     69D : A0                          MOV @r0, a
     637/     69E : 18                          inc r0
     637/     69F :                     
     637/     69F :                             ; xor bit 0 of the color value in r7 with ~carry
     637/     69F : A7                          cpl c
     637/     6A0 : 27                          clr a
     637/     6A1 : F7                          rlc a
     637/     6A2 : DF                          xrl a, r7
     637/     6A3 :                             ; write color value to the even byte
     637/     6A3 : A0                          MOV @r0, a
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 24 - 01/10/2022 00:51:37


     637/     6A4 : 18                          inc r0
     637/     6A5 :                     
     637/     6A5 :                             ; increment to next byte
     637/     6A5 : 19                          inc r1
     638/     6A6 : (MACRO)                      compute_char_macro mov
     638/     6A6 :                             ; Load character byte (shifted left twice)
     638/     6A6 : 81                          movx a, @r1
     638/     6A7 :                             ; cut out the lower three bits
     638/     6A7 : 53 07                       anl a, #111b
     638/     6A9 :                             ; lookup in the color table and store temporarily in r7
     638/     6A9 : A3                          movp a, @a
     638/     6AA : AF                          mov r7, a
     638/     6AB :                     
     638/     6AB :                             ; cut out the upper five bits
     638/     6AB : 81                          movx a, @r1
     638/     6AC : 53 F8                       anl a, #11111000b
     638/     6AE :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     638/     6AE : 6D                          add a, r5
     638/     6AF :                             ; write char value to the odd byte
     638/     6AF : A0                          MOV @r0, a
     638/     6B0 : 18                          inc r0
     638/     6B1 :                     
     638/     6B1 :                             ; xor bit 0 of the color value in r7 with ~carry
     638/     6B1 : A7                          cpl c
     638/     6B2 : 27                          clr a
     638/     6B3 : F7                          rlc a
     638/     6B4 : DF                          xrl a, r7
     638/     6B5 :                             ; write color value to the even byte
     638/     6B5 : A0                          MOV @r0, a
     638/     6B6 : 18                          inc r0
     638/     6B7 :                     
     638/     6B7 :                             ; increment to next byte
     638/     6B7 : 19                          inc r1
     639/     6B8 : (MACRO)                      compute_char_macro mov
     639/     6B8 :                             ; Load character byte (shifted left twice)
     639/     6B8 : 81                          movx a, @r1
     639/     6B9 :                             ; cut out the lower three bits
     639/     6B9 : 53 07                       anl a, #111b
     639/     6BB :                             ; lookup in the color table and store temporarily in r7
     639/     6BB : A3                          movp a, @a
     639/     6BC : AF                          mov r7, a
     639/     6BD :                     
     639/     6BD :                             ; cut out the upper five bits
     639/     6BD : 81                          movx a, @r1
     639/     6BE : 53 F8                       anl a, #11111000b
     639/     6C0 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     639/     6C0 : 6D                          add a, r5
     639/     6C1 :                             ; write char value to the odd byte
     639/     6C1 : A0                          MOV @r0, a
     639/     6C2 : 18                          inc r0
     639/     6C3 :                     
     639/     6C3 :                             ; xor bit 0 of the color value in r7 with ~carry
     639/     6C3 : A7                          cpl c
     639/     6C4 : 27                          clr a
     639/     6C5 : F7                          rlc a
     639/     6C6 : DF                          xrl a, r7
     639/     6C7 :                             ; write color value to the even byte
     639/     6C7 : A0                          MOV @r0, a
     639/     6C8 : 18                          inc r0
     639/     6C9 :                     
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 25 - 01/10/2022 00:51:37


     639/     6C9 :                             ; increment to next byte
     639/     6C9 : 19                          inc r1
     640/     6CA : (MACRO)                      compute_char_macro mov
     640/     6CA :                             ; Load character byte (shifted left twice)
     640/     6CA : 81                          movx a, @r1
     640/     6CB :                             ; cut out the lower three bits
     640/     6CB : 53 07                       anl a, #111b
     640/     6CD :                             ; lookup in the color table and store temporarily in r7
     640/     6CD : A3                          movp a, @a
     640/     6CE : AF                          mov r7, a
     640/     6CF :                     
     640/     6CF :                             ; cut out the upper five bits
     640/     6CF : 81                          movx a, @r1
     640/     6D0 : 53 F8                       anl a, #11111000b
     640/     6D2 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     640/     6D2 : 6D                          add a, r5
     640/     6D3 :                             ; write char value to the odd byte
     640/     6D3 : A0                          MOV @r0, a
     640/     6D4 : 18                          inc r0
     640/     6D5 :                     
     640/     6D5 :                             ; xor bit 0 of the color value in r7 with ~carry
     640/     6D5 : A7                          cpl c
     640/     6D6 : 27                          clr a
     640/     6D7 : F7                          rlc a
     640/     6D8 : DF                          xrl a, r7
     640/     6D9 :                             ; write color value to the even byte
     640/     6D9 : A0                          MOV @r0, a
     640/     6DA : 18                          inc r0
     640/     6DB :                     
     640/     6DB :                             ; increment to next byte
     640/     6DB : 19                          inc r1
     641/     6DC :                             ; for the last precompute, we want the 11th char since we don't populate the 10th here
     642/     6DC : 19                          inc r1
     643/     6DD : (MACRO)                      compute_char_macro mov
     643/     6DD :                             ; Load character byte (shifted left twice)
     643/     6DD : 81                          movx a, @r1
     643/     6DE :                             ; cut out the lower three bits
     643/     6DE : 53 07                       anl a, #111b
     643/     6E0 :                             ; lookup in the color table and store temporarily in r7
     643/     6E0 : A3                          movp a, @a
     643/     6E1 : AF                          mov r7, a
     643/     6E2 :                     
     643/     6E2 :                             ; cut out the upper five bits
     643/     6E2 : 81                          movx a, @r1
     643/     6E3 : 53 F8                       anl a, #11111000b
     643/     6E5 :                             ; add to the "-Y/2 offset" and hold onto carry outcome
     643/     6E5 : 6D                          add a, r5
     643/     6E6 :                             ; write char value to the odd byte
     643/     6E6 : A0                          MOV @r0, a
     643/     6E7 : 18                          inc r0
     643/     6E8 :                     
     643/     6E8 :                             ; xor bit 0 of the color value in r7 with ~carry
     643/     6E8 : A7                          cpl c
     643/     6E9 : 27                          clr a
     643/     6EA : F7                          rlc a
     643/     6EB : DF                          xrl a, r7
     643/     6EC :                             ; write color value to the even byte
     643/     6EC : A0                          MOV @r0, a
     643/     6ED : 18                          inc r0
     643/     6EE :                     
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 26 - 01/10/2022 00:51:37


     643/     6EE :                             ; increment to next byte
     643/     6EE : 19                          inc r1
     644/     6EF : 19                          inc r1
     645/     6F0 :                     
     646/     6F0 : (MACRO)                      assert "hi(compute_page) == hi($)"
     646/     6F0 : =>FALSE                      if (~~val("hi(compute_page) == hi($)"))
     646/     6F0 :                                 error "hi(compute_page) == hi($)"
     646/     6F0 : [646]                        endif
     647/     6F0 :                     
     648/     6F0 :                             ; Compute space/empty character
     649/     6F0 : =>UNDEFINED              ifdef DEBUG_COLORS
     650/     6F0 :                             mov a, #lo(47 << 3) + 1
     651/     6F0 : =>TRUE                   else
     652/     6F0 : 23 61                       mov a, #lo(' ' << 3) + 1
     653/     6F2 : [649]                    endif
     654/     6F2 : 6D                          add a, r5
     655/     6F3 : 07                          dec a
     656/     6F4 : AA                          mov r2, a
     657/     6F5 :                     
     658/     6F5 :                             ; save iram_iram_index
     659/     6F5 : F9                          mov a, r1
     660/     6F6 : B9 3A                       mov r1, #iram_iram_index
     661/     6F8 : A1                          mov @r1, a
     662/     6F9 :                     
     663/     6F9 : (MACRO)                      inline_external_vdc
     663/     6F9 : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     663/     6FB : 99 B7                       anl p1,#0b7h                      ; clear : !vdcen copyen (?)
     664/     6FD :                     
     665/     6FD :                     
     666/     6FD :                     ;----------------------
     667/     6FD :                     ; Row loop + write to VDC during critical period
     668/     6FD :                     ;----------------------
     669/     6FD :                     
     670/     6FD :                             ; Timing-sensitive "inner loop" that writes to VDC before each row
     671/     6FD :                             ; uses r0, r1, r2, r5, r6
     672/     6FD :                     row_write_to_vdc:
     673/     6FD :                             ; increment r5 (Y offset for VDC)
     674/     6FD : FD                          mov a, r5
     675/     6FE : 03 F6                       add a, #(-10)
     676/     700 : AD                          mov r5, a
     677/     701 :                             ; increment r6 (Y position for quads)
     678/     701 : FE                          mov a, r6
     679/     702 : 03 14                       add a, #20
     680/     704 : AE                          mov r6, a
     681/     705 :                     
     682/     705 :                             ; Base of scratchpad RAM
     683/     705 : B9 20                       mov r1, #iram_tile_compute_start
     684/     707 :                     
     685/     707 :                         .critical_zone:
     686/     707 :                             ; Disable foreground graphics
     687/     707 : (MACRO)                      disable_vdc_foreground
     687/     707 : B8 A0                       mov r0, #0a0h
     687/     709 : 23 88                       mov a,#8|128
     687/     70B : 90                          movx @r0,a
     688/     70C :                     
     689/     70C :                             ; Move all quads down
     690/     70C : FE                          mov a, r6
     691/     70D : B8 40                       mov r0, #vdc_quad0
     692/     70F : 90                          movx @r0,a
     693/     710 : B8 50                       mov r0, #vdc_quad1
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 27 - 01/10/2022 00:51:37


     694/     712 : 90                          movx @r0,a
     695/     713 : B8 60                       mov r0, #vdc_quad2
     696/     715 : 90                          movx @r0,a
     697/     716 :                             ; mov r0, #vdc_quad3
     698/     716 :                             ; movx @r0,a
     699/     716 :                     
     700/     716 :                             ; Copy from scratchpad RAM into VDC registers (10 cycles)
     701/     716 :                     write_to_char macro dest
     702/     716 :                             mov a, @r1
     703/     716 :                             inc r1
     704/     716 :                             mov r0, #dest+2
     705/     716 :                             movx @r0,a
     706/     716 :                             mov a, @r1
     707/     716 :                             inc r1
     708/     716 :                             inc r0
     709/     716 :                             movx @r0,a
     710/     716 :                         endm
     711/     716 :                     
     712/     716 :                             ; Repeat for each quad; to do this quickly we unroll the loop and repeat for each quad write
     713/     716 :                             ; We also do this in visual order, not memory order
     714/     716 : (MACRO)                      write_to_char vdc_quad0+0
     714/     716 : F1                          mov a, @r1
     714/     717 : 19                          inc r1
     714/     718 : B8 42                       mov r0, #VDC_QUAD0+0+2
     714/     71A : 90                          movx @r0,a
     714/     71B : F1                          mov a, @r1
     714/     71C : 19                          inc r1
     714/     71D : 18                          inc r0
     714/     71E : 90                          movx @r0,a
     715/     71F : (MACRO)                      write_to_char vdc_quad1+0
     715/     71F : F1                          mov a, @r1
     715/     720 : 19                          inc r1
     715/     721 : B8 52                       mov r0, #VDC_QUAD1+0+2
     715/     723 : 90                          movx @r0,a
     715/     724 : F1                          mov a, @r1
     715/     725 : 19                          inc r1
     715/     726 : 18                          inc r0
     715/     727 : 90                          movx @r0,a
     716/     728 : (MACRO)                      write_to_char vdc_quad0+4
     716/     728 : F1                          mov a, @r1
     716/     729 : 19                          inc r1
     716/     72A : B8 46                       mov r0, #VDC_QUAD0+4+2
     716/     72C : 90                          movx @r0,a
     716/     72D : F1                          mov a, @r1
     716/     72E : 19                          inc r1
     716/     72F : 18                          inc r0
     716/     730 : 90                          movx @r0,a
     717/     731 : (MACRO)                      write_to_char vdc_quad1+4
     717/     731 : F1                          mov a, @r1
     717/     732 : 19                          inc r1
     717/     733 : B8 56                       mov r0, #VDC_QUAD1+4+2
     717/     735 : 90                          movx @r0,a
     717/     736 : F1                          mov a, @r1
     717/     737 : 19                          inc r1
     717/     738 : 18                          inc r0
     717/     739 : 90                          movx @r0,a
     718/     73A : (MACRO)                      write_to_char vdc_quad0+8
     718/     73A : F1                          mov a, @r1
     718/     73B : 19                          inc r1
     718/     73C : B8 4A                       mov r0, #VDC_QUAD0+8+2
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 28 - 01/10/2022 00:51:37


     718/     73E : 90                          movx @r0,a
     718/     73F : F1                          mov a, @r1
     718/     740 : 19                          inc r1
     718/     741 : 18                          inc r0
     718/     742 : 90                          movx @r0,a
     719/     743 : (MACRO)                      write_to_char vdc_quad1+8
     719/     743 : F1                          mov a, @r1
     719/     744 : 19                          inc r1
     719/     745 : B8 5A                       mov r0, #VDC_QUAD1+8+2
     719/     747 : 90                          movx @r0,a
     719/     748 : F1                          mov a, @r1
     719/     749 : 19                          inc r1
     719/     74A : 18                          inc r0
     719/     74B : 90                          movx @r0,a
     720/     74C : (MACRO)                      write_to_char vdc_quad0+12
     720/     74C : F1                          mov a, @r1
     720/     74D : 19                          inc r1
     720/     74E : B8 4E                       mov r0, #VDC_QUAD0+12+2
     720/     750 : 90                          movx @r0,a
     720/     751 : F1                          mov a, @r1
     720/     752 : 19                          inc r1
     720/     753 : 18                          inc r0
     720/     754 : 90                          movx @r0,a
     721/     755 : (MACRO)                      write_to_char vdc_quad1+12
     721/     755 : F1                          mov a, @r1
     721/     756 : 19                          inc r1
     721/     757 : B8 5E                       mov r0, #VDC_QUAD1+12+2
     721/     759 : 90                          movx @r0,a
     721/     75A : F1                          mov a, @r1
     721/     75B : 19                          inc r1
     721/     75C : 18                          inc r0
     721/     75D : 90                          movx @r0,a
     722/     75E : (MACRO)                      write_to_char vdc_quad2+0
     722/     75E : F1                          mov a, @r1
     722/     75F : 19                          inc r1
     722/     760 : B8 62                       mov r0, #VDC_QUAD2+0+2
     722/     762 : 90                          movx @r0,a
     722/     763 : F1                          mov a, @r1
     722/     764 : 19                          inc r1
     722/     765 : 18                          inc r0
     722/     766 : 90                          movx @r0,a
     723/     767 :                     
     724/     767 :                             ; Can elide the last "inc r1" for the last quad
     725/     767 : F1                          mov a, @r1
     726/     768 : 19                          inc r1
     727/     769 : B8 66                       mov r0, #vdc_quad2+4+2
     728/     76B : 90                          movx @r0,a
     729/     76C : F1                          mov a, @r1
     730/     76D :                             ; inc r1
     731/     76D : 18                          inc r0
     732/     76E : 90                          movx @r0,a
     733/     76F :                     
     734/     76F :                             ; Write out "empty" characters (last two entries in the third quad) using r2
     735/     76F : FA                          mov a, r2
     736/     770 : B8 6A                       mov r0, #vdc_quad2+8+2     ; 2
     737/     772 : 90                          movx @r0, a
     738/     773 : B8 6E                       mov r0, #vdc_quad2+12+2     ; 2
     739/     775 : 90                          movx @r0, a
     740/     776 :                     
     741/     776 :                             ; Rewrite the last row
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 29 - 01/10/2022 00:51:37


     742/     776 : FB                          mov a, r3
     743/     777 : A8                          mov r0, a
     744/     778 : FC                          mov a, r4
     745/     779 : 90                          movx @r0, a
     746/     77A :                     
     747/     77A :                             ; Pad out the rest of the cycles in the line
     748/     77A :                             ; TODO: this can be reused for something more interesting graphically
     749/     77A : (MACRO)                      sleep_loop r0, TIMING_VDC_WRITE_PADDING
     749/     77A : =>TRUE                   if TIMING_VDC_WRITE_PADDING < 5
     749/     77A :  (MACRO-2)                   sleep_nop TIMING_VDC_WRITE_PADDING
     749/     77A :                         rept TIMING_VDC_WRITE_PADDING
     749/     77A :                             nop
     749/     77A :                         endm
     749/     77A : 00                          nop
     749/     77B : 00                          nop
     749/     77C : 00                          nop
     749/     77D : 00                          nop
     749/     77E : =>FALSE                  else
     749/     77E :                             if ((TIMING_VDC_WRITE_PADDING - 2) # 2) == 1
     749/     77E :                                 nop
     749/     77E : [749]                        endif
     749/     77E :                                 mov R0,#((TIMING_VDC_WRITE_PADDING - 2) / 2)
     749/     77E :                             -:
     749/     77E :                                 djnz R0,-
     749/     77E : [749]                    endif
     750/     77E :                     
     751/     77E :                             ; Enable foreground graphics
     752/     77E : (MACRO)                      enable_vdc_foreground
     752/     77E : B8 A0                       mov r0, #0a0h
     752/     780 : 23 A8                       mov a,#8|32|128
     752/     782 : 90                          movx @r0,a
     753/     783 :                     
     754/     783 :                         .sleep_until_next_row:
     755/     783 :                             ; wait loop until next row
     756/     783 : (MACRO)                      sleep_loop r0, TIMING_AFTER_COMPUTE
     756/     783 : =>FALSE                  if TIMING_AFTER_COMPUTE < 5
     756/     783 :                             sleep_nop TIMING_AFTER_COMPUTE
     756/     783 : =>TRUE                   else
     756/     783 : =>TRUE                       if ((TIMING_AFTER_COMPUTE - 2) # 2) == 1
     756/     783 : 00                              nop
     756/     784 : [756]                        endif
     756/     784 : B8 13                           mov R0,#((TIMING_AFTER_COMPUTE - 2) / 2)
     756/     786 :                             -:
     756/     786 : E8 86                           djnz R0,-
     756/     788 : [756]                    endif
     757/     788 :                     
     758/     788 :                             ; set grid+background color
     759/     788 : =>UNDEFINED              ifdef DEBUG_COLORS
     760/     788 :                             mov	r0,#vdc_color
     761/     788 :                             mov r1,#iram_iram_index
     762/     788 :                             mov	a,@r1
     763/     788 :                             movx	@r0,a
     764/     788 : =>TRUE                   else
     765/     788 : (MACRO)                      sleep_loop r0, 7
     765/     788 : =>FALSE                  if 7 < 5
     765/     788 :                             sleep_nop 7
     765/     788 : =>TRUE                   else
     765/     788 : =>TRUE                       if ((7 - 2) # 2) == 1
     765/     788 : 00                              nop
     765/     789 : [765]                        endif
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 30 - 01/10/2022 00:51:37


     765/     789 : B8 02                           mov R0,#((7 - 2) / 2)
     765/     78B :                             -:
     765/     78B : E8 8B                           djnz R0,-
     765/     78D : [765]                    endif
     766/     78D : [759]                    endif
     767/     78D :                     
     768/     78D :                             ; VDC is enabled, start computing next row
     769/     78D : 93                          retr
     770/     78E :                     
     771/     78E :                     
     772/     78E :                     ;------------------------------
     773/     78E :                     ; Program loop, starts in bank 1
     774/     78E :                     ;------------------------------
     775/     78E :                     
     776/     78E : =62H                 EXTRAM_SCORE            equ 0x62
     777/     78E :                     ; EXTRAM_APPLE_X          equ 0x62
     778/     78E :                     ; EXTRAM_APPLE_Y          equ 0x63
     779/     78E : =64H                 EXTRAM_SNAKE_START_X    equ 0x64
     780/     78E : =65H                 EXTRAM_SNAKE_START_Y    equ 0x65
     781/     78E : =66H                 EXTRAM_SNAKE_START_DIR  equ 0x66
     782/     78E : =67H                 EXTRAM_SNAKE_END_X      equ 0x67
     783/     78E : =68H                 EXTRAM_SNAKE_END_Y      equ 0x68
     784/     78E : =69H                 EXTRAM_SNAKE_END_DIR    equ 0x69
     785/     78E : =6AH                 EXTRAM_FRAME            equ 0x6a
     786/     78E :                     ; EXTRAM_RANDOM           equ 0x6b
     787/     78E :                     
     788/     78E : =3AH                 SNAKE_TILE              equ 58
     789/     78E : =34H                 SNAKE_LEFT              equ 52
     790/     78E : =33H                 SNAKE_RIGHT             equ 51
     791/     78E : =31H                 APPLE_TILE              equ 49
     792/     78E : =' '                 EMPTY_TILE              equ ' '
     793/     78E :                     
     794/     78E :                     ; Same as joystick bit pattern
     795/     78E : =1H                  DIR_UP                  equ 1 << 0
     796/     78E : =2H                  DIR_RIGHT               equ 1 << 1
     797/     78E : =4H                  DIR_DOWN                equ 1 << 2
     798/     78E : =8H                  DIR_LEFT                equ 1 << 3
     799/     78E :                     
     800/     800 :                             org $800
     801/     800 :                     
     802/     800 :                             ; main loop
     803/     800 :                     main:
     804/     800 : (MACRO)                      inline_external_ram
     804/     800 : 89 BC                       orl p1,#0bch                      ; set : !kbscan !vdcen !ramen  lumen
     804/     802 : 99 AF                       anl p1,#0afh                      ; clear : !ramen copyen
     805/     804 :                     
     806/     804 :                             ; dis i
     807/     804 :                     
     808/     804 :                             ; random byte
     809/     804 : 23 04                       mov a, #4
     810/     806 : B8 3D                       mov r0, #iram_random
     811/     808 : A0                          mov @r0, a
     812/     809 :                     
     813/     809 :                             ; Write decorative tiles
     814/     809 : (MACRO)                      write_extram_string 'SNAKE', 2, 0, TILE_GREEN
     814/     809 : B8 02                       mov r0, #2 + (0 * 12)
     814/     80B : =0H                  .cnt set 0
     814/     80B :                             while .cnt < STRLEN('SNAKE')
     814/     80B :                                 mov a, #rotln(lo(SUBSTR('SNAKE', .cnt, 1) << 2) | TILE_GREEN, 8, 1)
     814/     80B :                                 movx @r0, a
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 31 - 01/10/2022 00:51:37


     814/     80B :                                 inc r0
     814/     80B :                     .cnt set .cnt + 1
     814/     80B :                             endm
     814/     80B : 23 CC                           mov a, #rotln(lo(SUBSTR('SNAKE', .cnt, 1) << 2) | TILE_GREEN, 8, 1)
     814/     80D : 90                              movx @r0, a
     814/     80E : 18                              inc r0
     814/     80F : =1H                  .cnt set .cnt + 1
     814/     80F : 23 6D                           mov a, #rotln(lo(SUBSTR('SNAKE', .cnt, 1) << 2) | TILE_GREEN, 8, 1)
     814/     811 : 90                              movx @r0, a
     814/     812 : 18                              inc r0
     814/     813 : =2H                  .cnt set .cnt + 1
     814/     813 : 23 05                           mov a, #rotln(lo(SUBSTR('SNAKE', .cnt, 1) << 2) | TILE_GREEN, 8, 1)
     814/     815 : 90                              movx @r0, a
     814/     816 : 18                              inc r0
     814/     817 : =3H                  .cnt set .cnt + 1
     814/     817 : 23 FC                           mov a, #rotln(lo(SUBSTR('SNAKE', .cnt, 1) << 2) | TILE_GREEN, 8, 1)
     814/     819 : 90                              movx @r0, a
     814/     81A : 18                              inc r0
     814/     81B : =4H                  .cnt set .cnt + 1
     814/     81B : 23 94                           mov a, #rotln(lo(SUBSTR('SNAKE', .cnt, 1) << 2) | TILE_GREEN, 8, 1)
     814/     81D : 90                              movx @r0, a
     814/     81E : 18                              inc r0
     814/     81F : =5H                  .cnt set .cnt + 1
     814/     81F :                     
     815/     81F : (MACRO)                      write_extram_char 54, 7, 0, TILE_BLUE
     815/     81F : 23 B7                       mov a, #rotln((54 << 2) | TILE_BLUE, 8, 1)
     815/     821 : B8 07                       mov r0, #7 + (0 * 12)
     815/     823 : 90                          movx @r0, a
     816/     824 : (MACRO)                      write_extram_string '00', 8, 0, TILE_WHITE
     816/     824 : B8 08                       mov r0, #8 + (0 * 12)
     816/     826 : =0H                  .cnt set 0
     816/     826 :                             while .cnt < STRLEN('00')
     816/     826 :                                 mov a, #rotln(lo(SUBSTR('00', .cnt, 1) << 2) | TILE_WHITE, 8, 1)
     816/     826 :                                 movx @r0, a
     816/     826 :                                 inc r0
     816/     826 :                     .cnt set .cnt + 1
     816/     826 :                             endm
     816/     826 : 23 00                           mov a, #rotln(lo(SUBSTR('00', .cnt, 1) << 2) | TILE_WHITE, 8, 1)
     816/     828 : 90                              movx @r0, a
     816/     829 : 18                              inc r0
     816/     82A : =1H                  .cnt set .cnt + 1
     816/     82A : 23 00                           mov a, #rotln(lo(SUBSTR('00', .cnt, 1) << 2) | TILE_WHITE, 8, 1)
     816/     82C : 90                              movx @r0, a
     816/     82D : 18                              inc r0
     816/     82E : =2H                  .cnt set .cnt + 1
     816/     82E :                     
     817/     82E :                     
     818/     82E :                             ; extram frame
     819/     82E : 23 00                       mov a, #0
     820/     830 : B8 6A                       mov r0, #EXTRAM_FRAME
     821/     832 : 90                          movx @r0, a
     822/     833 :                             ; extram score
     823/     833 : 27                          clr a
     824/     834 : B8 62                       mov r0, #EXTRAM_SCORE
     825/     836 : 90                          movx @r0, a
     826/     837 :                     
     827/     837 :                             ; extram snake start x
     828/     837 : 23 03                       mov a, #3
     829/     839 : B8 64                       mov r0, #EXTRAM_SNAKE_START_X
     830/     83B : 90                          movx @r0, a
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 32 - 01/10/2022 00:51:37


     831/     83C :                             ; extram snake start y
     832/     83C : 23 04                       mov a, #4
     833/     83E : B8 65                       mov r0, #EXTRAM_SNAKE_START_Y
     834/     840 : 90                          movx @r0, a
     835/     841 :                             ; extram snake start dir
     836/     841 : 23 02                       mov a, #DIR_RIGHT
     837/     843 : B8 66                       mov r0, #EXTRAM_SNAKE_START_DIR
     838/     845 : 90                          movx @r0, a
     839/     846 :                             ; extram snake end x
     840/     846 : 23 04                       mov a, #4
     841/     848 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
     842/     84A : 90                          movx @r0, a
     843/     84B :                             ; extram snake end y
     844/     84B : 23 04                       mov a, #4
     845/     84D : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
     846/     84F : 90                          movx @r0, a
     847/     850 :                             ; extram snake end dir
     848/     850 : 23 02                       mov a, #DIR_RIGHT
     849/     852 : B8 69                       mov r0, #EXTRAM_SNAKE_END_DIR
     850/     854 : 90                          movx @r0, a
     851/     855 :                     
     852/     855 :                             ; draw snake
     853/     855 : B9 D5                       mov r1, #calc_extram_char(SNAKE_TILE, TILE_GREEN)
     854/     857 : BA 03                       mov r2, #3
     855/     859 : BB 04                       mov r3, #4
     856/     85B : 54 CB                       call routine_write_extram_char
     857/     85D : BA 04                       mov r2, #4
     858/     85F : BB 04                       mov r3, #4
     859/     861 : 54 CB                       call routine_write_extram_char
     860/     863 :                     
     861/     863 :                             ; TEMP snake extension
     862/     863 :                             ; mov r1, #calc_extram_char(SNAKE_RIGHT, TILE_GREEN)
     863/     863 :                             ; mov r2, #3
     864/     863 :                             ; mov r3, #4
     865/     863 :                             ; call routine_write_extram_char
     866/     863 :                             ; mov r1, #calc_extram_char(SNAKE_LEFT, TILE_GREEN)
     867/     863 :                             ; mov r2, #3
     868/     863 :                             ; mov r3, #5
     869/     863 :                             ; call routine_write_extram_char
     870/     863 :                             ; mov r1, #calc_extram_char(SNAKE_TILE, TILE_GREEN)
     871/     863 :                             ; mov r2, #2
     872/     863 :                             ; mov r3, #5
     873/     863 :                             ; call routine_write_extram_char
     874/     863 :                     
     875/     863 : 54 8C                       call new_apple_position
     876/     865 :                     
     877/     865 :                             ; en i
     878/     865 :                     
     879/     865 :                     main_loop:
     880/     865 :                             ; Clear the "frame done" flag
     881/     865 : B8 3C                       mov r0, #iram_ictrl
     882/     867 : F0                          mov a, @r0
     883/     868 : 53 7F                       anl a, #01111111b
     884/     86A : A0                          mov @r0, a
     885/     86B :                         
     886/     86B :                         .main_loop_start:
     887/     86B :                             ; Seed the randomizer with keyboard inputs
     888/     86B : B8 3B                       mov r0, #iram_keyboard
     889/     86D : F0                          mov a, @r0
     890/     86E : 53 0F                       anl a, #1111b
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 33 - 01/10/2022 00:51:37


     891/     870 : C6 79                       jz +
     892/     872 : B8 3D                       mov r0, #iram_random
     893/     874 : F0                          mov a, @r0
     894/     875 : 77                          rr a
     895/     876 : 47                          swap a
     896/     877 : 77                          rr a
     897/     878 : A0                          mov @r0, a
     898/     879 :                         +:
     899/     879 :                             
     900/     879 :                             ; until a frame has passed, do nothing
     901/     879 : B8 3C                       mov r0, #iram_ictrl
     902/     87B : F0                          mov a, @r0
     903/     87C : 37                          cpl	a
     904/     87D : F2 6B                       jb7	.main_loop_start
     905/     87F :                     
     906/     87F :                             ; bump frame
     907/     87F : B8 6A                       mov r0, #EXTRAM_FRAME
     908/     881 : 80                          movx a, @r0
     909/     882 : 72 88                       jb3 .next_frame
     910/     884 :                             ; jb4 .next_frame
     911/     884 :                             ; jb5 .next_frame
     912/     884 : 17                          inc a
     913/     885 : 90                          movx @r0, a
     914/     886 : 04 65                       jmp main_loop
     915/     888 :                         .next_frame:
     916/     888 :                             ; Clear frameskip number
     917/     888 : 23 00                       mov a, #0
     918/     88A : 90                          movx @r0, a
     919/     88B :                     
     920/     88B : 24 00                       jmp change_direction
     921/     88D :                     
     922/     88D :                     
     923/     88D :                     
     924/     88D :                             align 128
     925/     900 :                     
     926/     900 :                     change_direction:
     927/     900 :                             ; Move current direction into r4
     928/     900 : B8 69                       mov r0, #EXTRAM_SNAKE_END_DIR
     929/     902 : 80                          movx a, @r0
     930/     903 : AC                          mov r4, a
     931/     904 :                     
     932/     904 :                             ; load joystick ram
     933/     904 : B8 3B                       mov r0, #iram_keyboard
     934/     906 : F0                          mov a, @r0
     935/     907 :                             ; clear joystick
     936/     907 : AD                          mov r5, a
     937/     908 : 27                          clr a
     938/     909 : A0                          mov @r0, a
     939/     90A : FD                          mov a, r5
     940/     90B :                     
     941/     90B : 12 15                       jb0 .up
     942/     90D : 32 29                       jb1 .right
     943/     90F : 52 3D                       jb2 .down
     944/     911 : 72 51                       jb3 .left
     945/     913 : 24 75                       jmp .skip
     946/     915 :                     
     947/     915 :                         .up:
     948/     915 : BD 01                       mov r5, #DIR_UP
     949/     917 : FC                          mov a, r4
     950/     918 : 53 08                       anl a, #DIR_LEFT
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 34 - 01/10/2022 00:51:37


     951/     91A : C6 20                       jz +
     952/     91C : B9 9D                       mov r1, #calc_extram_char(SNAKE_RIGHT, TILE_GREEN)
     953/     91E : 24 65                       jmp .accept
     954/     920 :                         +:
     955/     920 : FC                          mov a, r4
     956/     921 : 53 02                       anl a, #DIR_RIGHT
     957/     923 : C6 75                       jz .skip
     958/     925 : B9 A5                       mov r1, #calc_extram_char(SNAKE_LEFT, TILE_GREEN)
     959/     927 : 24 65                       jmp .accept
     960/     929 :                     
     961/     929 :                         .right:
     962/     929 : BD 02                       mov r5, #DIR_RIGHT
     963/     92B : FC                          mov a, r4
     964/     92C : 53 01                       anl a, #DIR_UP
     965/     92E : C6 34                       jz +
     966/     930 : B9 9D                       mov r1, #calc_extram_char(SNAKE_RIGHT, TILE_GREEN)
     967/     932 : 24 65                       jmp .accept
     968/     934 :                         +:
     969/     934 : FC                          mov a, r4
     970/     935 : 53 04                       anl a, #DIR_DOWN
     971/     937 : C6 75                       jz .skip
     972/     939 : B9 9D                       mov r1, #calc_extram_char(SNAKE_RIGHT, TILE_GREEN)
     973/     93B : 24 65                       jmp .accept
     974/     93D :                     
     975/     93D :                         .down:
     976/     93D : BD 04                       mov r5, #DIR_DOWN
     977/     93F : FC                          mov a, r4
     978/     940 : 53 08                       anl a, #DIR_LEFT
     979/     942 : C6 48                       jz +
     980/     944 : B9 A5                       mov r1, #calc_extram_char(SNAKE_LEFT, TILE_GREEN)
     981/     946 : 24 65                       jmp .accept
     982/     948 :                         +:
     983/     948 : FC                          mov a, r4
     984/     949 : 53 02                       anl a, #DIR_RIGHT
     985/     94B : C6 75                       jz .skip
     986/     94D : B9 9D                       mov r1, #calc_extram_char(SNAKE_RIGHT, TILE_GREEN)
     987/     94F : 24 65                       jmp .accept
     988/     951 :                     
     989/     951 :                         .left:
     990/     951 : BD 08                       mov r5, #DIR_LEFT
     991/     953 : FC                          mov a, r4
     992/     954 : 53 01                       anl a, #DIR_UP
     993/     956 : C6 5C                       jz +
     994/     958 : B9 A5                       mov r1, #calc_extram_char(SNAKE_LEFT, TILE_GREEN)
     995/     95A : 24 65                       jmp .accept
     996/     95C :                         +:
     997/     95C : FC                          mov a, r4
     998/     95D : 53 04                       anl a, #DIR_DOWN
     999/     95F : C6 75                       jz .skip
    1000/     961 : B9 A5                       mov r1, #calc_extram_char(SNAKE_LEFT, TILE_GREEN)
    1001/     963 : 24 65                       jmp .accept
    1002/     965 :                     
    1003/     965 :                         .accept:
    1004/     965 :                             ; extram snake end x
    1005/     965 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
    1006/     967 : 80                          movx a, @r0
    1007/     968 : AA                          mov r2, a
    1008/     969 :                             ; extram snake end y
    1009/     969 : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
    1010/     96B : 80                          movx a, @r0
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 35 - 01/10/2022 00:51:37


    1011/     96C : AB                          mov r3, a
    1012/     96D :                             ; Write to current sprite pos
    1013/     96D : 54 CB                       call routine_write_extram_char
    1014/     96F :                     
    1015/     96F :                             ; Write direction to extram and continue
    1016/     96F : FD                          mov a, r5
    1017/     970 : B8 69                       mov r0, #EXTRAM_SNAKE_END_DIR
    1018/     972 : 90                          movx @r0, a
    1019/     973 : 24 90                       jmp move_head
    1020/     975 :                     
    1021/     975 :                         .skip:
    1022/     975 :                             ; extram snake end x
    1023/     975 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
    1024/     977 : 80                          movx a, @r0
    1025/     978 : AA                          mov r2, a
    1026/     979 :                             ; extram snake end y
    1027/     979 : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
    1028/     97B : 80                          movx a, @r0
    1029/     97C : AB                          mov r3, a
    1030/     97D :                             ; Write to current sprite pos
    1031/     97D : B9 D5                       mov r1, #calc_extram_char(SNAKE_TILE, TILE_GREEN)
    1032/     97F : 54 CB                       call routine_write_extram_char
    1033/     981 :                     
    1034/     981 : 24 90                       jmp move_head
    1035/     983 :                     
    1036/     983 :                             align 16
    1037/     990 :                     
    1038/     990 :                     move_head:
    1039/     990 :                             ; extram snake end x
    1040/     990 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
    1041/     992 : 80                          movx a, @r0
    1042/     993 : AA                          mov r2, a
    1043/     994 :                             ; extram snake end y
    1044/     994 : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
    1045/     996 : 80                          movx a, @r0
    1046/     997 : AB                          mov r3, a
    1047/     998 :                             ; extram snake dir
    1048/     998 : B8 69                       mov r0, #EXTRAM_SNAKE_END_DIR
    1049/     99A : 80                          movx a, @r0
    1050/     99B :                     
    1051/     99B : 12 AF                       jb0 .up
    1052/     99D : 32 BD                       jb1 .right
    1053/     99F : 52 CB                       jb2 .down
    1054/     9A1 :                             ; jb3 .left
    1055/     9A1 :                         .left:
    1056/     9A1 :                             ; Check position
    1057/     9A1 : FA                          mov a, r2
    1058/     9A2 : 03 00                       add a, #0
    1059/     9A4 : 96 A8                       jnz +
    1060/     9A6 : 44 20                       jmp game_over
    1061/     9A8 :                             
    1062/     9A8 :                             ; Update position
    1063/     9A8 :                         +:
    1064/     9A8 : CA                          dec r2
    1065/     9A9 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
    1066/     9AB : FA                          mov a, r2
    1067/     9AC : 90                          movx @r0, a
    1068/     9AD : 24 D9                       jmp .done
    1069/     9AF :                         .up:
    1070/     9AF :                             ; Check position
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 36 - 01/10/2022 00:51:37


    1071/     9AF : FB                          mov a, r3
    1072/     9B0 : 03 FE                       add a, #-(2)
    1073/     9B2 : F6 B6                       jc +
    1074/     9B4 : 44 20                       jmp game_over
    1075/     9B6 :                             
    1076/     9B6 :                             ; Update position
    1077/     9B6 :                         +:
    1078/     9B6 : CB                          dec r3
    1079/     9B7 : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
    1080/     9B9 : FB                          mov a, r3
    1081/     9BA : 90                          movx @r0, a
    1082/     9BB : 24 D9                       jmp .done
    1083/     9BD :                         .right:
    1084/     9BD :                             ; Check position
    1085/     9BD : FA                          mov a, r2
    1086/     9BE : 03 F5                       add a, #-11
    1087/     9C0 : E6 C4                       jnc +
    1088/     9C2 : 44 20                       jmp game_over
    1089/     9C4 :                             
    1090/     9C4 :                             ; Update position
    1091/     9C4 :                         +:
    1092/     9C4 : 1A                          inc r2
    1093/     9C5 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
    1094/     9C7 : FA                          mov a, r2
    1095/     9C8 : 90                          movx @r0, a
    1096/     9C9 : 24 D9                       jmp .done
    1097/     9CB :                         .down:
    1098/     9CB :                             ; Check position
    1099/     9CB : FB                          mov a, r3
    1100/     9CC : 03 F9                       add a, #-7
    1101/     9CE : E6 D2                       jnc +
    1102/     9D0 : 44 20                       jmp game_over
    1103/     9D2 :                             
    1104/     9D2 :                             ; Update position
    1105/     9D2 :                         +:
    1106/     9D2 : 1B                          inc r3
    1107/     9D3 : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
    1108/     9D5 : FB                          mov a, r3
    1109/     9D6 : 90                          movx @r0, a
    1110/     9D7 : 24 D9                       jmp .done
    1111/     9D9 :                     
    1112/     9D9 :                         .done:
    1113/     9D9 :                             ; Copy X and Y to backup registers
    1114/     9D9 : FA                          mov a, r2
    1115/     9DA : AC                          mov r4, a
    1116/     9DB : FB                          mov a, r3
    1117/     9DC : AD                          mov r5, a
    1118/     9DD :                     
    1119/     9DD :                     check_target_tile:
    1120/     9DD :                             ; Read tile at this location
    1121/     9DD : 54 DB                       call routine_read_extram_char
    1122/     9DF : AE                          mov r6, a
    1123/     9E0 :                     
    1124/     9E0 :                             ; Write tile
    1125/     9E0 : FC                          mov a, r4
    1126/     9E1 : AA                          mov r2, a
    1127/     9E2 : FD                          mov a, r5
    1128/     9E3 : AB                          mov r3, a
    1129/     9E4 : B9 D7                       mov r1, #calc_extram_char(SNAKE_TILE, TILE_BLUE)
    1130/     9E6 : 54 CB                       call routine_write_extram_char
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 37 - 01/10/2022 00:51:37


    1131/     9E8 :                     
    1132/     9E8 :                             ; Check overwritten tile for apple
    1133/     9E8 : FE                          mov a, r6
    1134/     9E9 : 03 CF                       add a, #-(APPLE_TILE)
    1135/     9EB : C6 EF                       jz .ate_apple
    1136/     9ED : 44 16                       jmp .check_collision
    1137/     9EF :                     
    1138/     9EF :                         .ate_apple:
    1139/     9EF :                             ; Update the apple position
    1140/     9EF : 54 8C                       call new_apple_position
    1141/     9F1 :                     
    1142/     9F1 :                             ; increment score
    1143/     9F1 : B8 62                       mov r0, #EXTRAM_SCORE
    1144/     9F3 : 80                          movx a, @r0
    1145/     9F4 : 03 01                       add a, #01h
    1146/     9F6 : 57                          da a
    1147/     9F7 : 90                          movx @r0, a
    1148/     9F8 :                             ; update display
    1149/     9F8 : 53 0F                       anl a, #1111b
    1150/     9FA : E7                          rl a
    1151/     9FB : E7                          rl a
    1152/     9FC : E7                          rl a
    1153/     9FD : A9                          mov r1, a
    1154/     9FE : BA 09                       mov r2, #9
    1155/     A00 : BB 00                       mov r3, #0
    1156/     A02 : 54 CB                       call routine_write_extram_char
    1157/     A04 : B8 62                       mov r0, #EXTRAM_SCORE
    1158/     A06 : 80                          movx a, @r0
    1159/     A07 : 47                          swap a
    1160/     A08 : 53 0F                       anl a, #1111b
    1161/     A0A : E7                          rl a
    1162/     A0B : E7                          rl a
    1163/     A0C : E7                          rl a
    1164/     A0D : A9                          mov r1, a
    1165/     A0E : BA 08                       mov r2, #8
    1166/     A10 : BB 00                       mov r3, #0
    1167/     A12 : 54 CB                       call routine_write_extram_char
    1168/     A14 :                     
    1169/     A14 :                             ; loop game
    1170/     A14 : 04 65                       jmp main_loop
    1171/     A16 :                     
    1172/     A16 :                             ; Check overwritten tile for snake
    1173/     A16 :                         .check_collision:
    1174/     A16 : FE                          mov a, r6
    1175/     A17 : 03 F4                       add a, #-(EMPTY_TILE)
    1176/     A19 : C6 1D                       jz +
    1177/     A1B : 44 20                       jmp game_over
    1178/     A1D :                     
    1179/     A1D :                         +:
    1180/     A1D : 44 3A                       jmp move_tail
    1181/     A1F :                     
    1182/     A1F :                             align 16
    1183/     A20 :                     
    1184/     A20 :                     game_over:
    1185/     A20 :                             ; draw red X where we ended
    1186/     A20 : B9 13                       mov r1, #calc_extram_char('X', TILE_RED)
    1187/     A22 :                             ; extram snake end x
    1188/     A22 : B8 67                       mov r0, #EXTRAM_SNAKE_END_X
    1189/     A24 : 80                          movx a, @r0
    1190/     A25 : AA                          mov r2, a
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 38 - 01/10/2022 00:51:37


    1191/     A26 :                             ; extram snake end y
    1192/     A26 : B8 68                       mov r0, #EXTRAM_SNAKE_END_Y
    1193/     A28 : 80                          movx a, @r0
    1194/     A29 : AB                          mov r3, a
    1195/     A2A : 54 CB                       call routine_write_extram_char
    1196/     A2C :                     
    1197/     A2C :                             ; wait for keypress
    1198/     A2C : B8 3B                       mov r0, #iram_keyboard
    1199/     A2E : 27                          clr a
    1200/     A2F : A0                          mov @r0, a
    1201/     A30 :                     
    1202/     A30 :                         -:
    1203/     A30 : F0                          mov a, @r0
    1204/     A31 : 92 35                       jb4 +
    1205/     A33 : 44 30                       jmp -
    1206/     A35 :                         +:
    1207/     A35 : 15                          dis i
    1208/     A36 : 35                          dis	tcnti
    1209/     A37 : E5 84 0C                    jmp bank0_start
    1210/     A3A :                     
    1211/     A3A :                     
    1212/     A3A :                     
    1213/     A3A :                             ; load tail position
    1214/     A3A :                     move_tail:
    1215/     A3A :                             ; extram snake end x
    1216/     A3A : B8 64                       mov r0, #EXTRAM_SNAKE_START_X
    1217/     A3C : 80                          movx a, @r0
    1218/     A3D : AC                          mov r4, a
    1219/     A3E :                             ; extram snake end y
    1220/     A3E : B8 65                       mov r0, #EXTRAM_SNAKE_START_Y
    1221/     A40 : 80                          movx a, @r0
    1222/     A41 : AD                          mov r5, a
    1223/     A42 :                     
    1224/     A42 : FC                          mov a, r4
    1225/     A43 : AA                          mov r2, a
    1226/     A44 : FD                          mov a, r5
    1227/     A45 : AB                          mov r3, a
    1228/     A46 : 54 DB                       call routine_read_extram_char
    1229/     A48 : A8                          mov r0, a
    1230/     A49 : B9 66                       mov r1, #EXTRAM_SNAKE_START_DIR
    1231/     A4B : 81                          movx a, @r1
    1232/     A4C : A9                          mov r1, a
    1233/     A4D : 74 0C                       call get_dir_from_char
    1234/     A4F : B9 66                       mov r1, #EXTRAM_SNAKE_START_DIR
    1235/     A51 : 91                          movx @r1, a
    1236/     A52 :                             ; Save the direction
    1237/     A52 : AE                          mov r6, a
    1238/     A53 :                     
    1239/     A53 :                         .erase_tile:
    1240/     A53 : B9 64                       mov r1, #calc_extram_char(EMPTY_TILE, TILE_GREEN)
    1241/     A55 : FC                          mov a, r4
    1242/     A56 : AA                          mov r2, a
    1243/     A57 : FD                          mov a, r5
    1244/     A58 : AB                          mov r3, a
    1245/     A59 : 54 CB                       call routine_write_extram_char
    1246/     A5B :                     
    1247/     A5B :                     update_tail_position:
    1248/     A5B : FE                          mov a, r6
    1249/     A5C : 12 77                       jb0 .up
    1250/     A5E : 32 70                       jb1 .right
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 39 - 01/10/2022 00:51:37


    1251/     A60 : 52 69                       jb2 .down
    1252/     A62 :                         .left:
    1253/     A62 : B8 64                       mov r0, #EXTRAM_SNAKE_START_X
    1254/     A64 : 80                          movx a, @r0
    1255/     A65 : 07                          dec a
    1256/     A66 : 90                          movx @r0, a
    1257/     A67 : 44 7C                       jmp .done
    1258/     A69 :                         .down:
    1259/     A69 : B8 65                       mov r0, #EXTRAM_SNAKE_START_Y
    1260/     A6B : 80                          movx a, @r0
    1261/     A6C : 17                          inc a
    1262/     A6D : 90                          movx @r0, a
    1263/     A6E : 44 7C                       jmp .done
    1264/     A70 :                         .right:
    1265/     A70 : B8 64                       mov r0, #EXTRAM_SNAKE_START_X
    1266/     A72 : 80                          movx a, @r0
    1267/     A73 : 17                          inc a
    1268/     A74 : 90                          movx @r0, a
    1269/     A75 : 44 7C                       jmp .done
    1270/     A77 :                         .up:
    1271/     A77 : B8 65                       mov r0, #EXTRAM_SNAKE_START_Y
    1272/     A79 : 80                          movx a, @r0
    1273/     A7A : 07                          dec a
    1274/     A7B : 90                          movx @r0, a
    1275/     A7C :                             ; jmp .done
    1276/     A7C :                     
    1277/     A7C :                         .done:
    1278/     A7C : 04 65                       jmp main_loop
    1279/     A7E :                     
    1280/     A7E :                     
    1281/     A7E :                     
    1282/     A7E :                     
    1283/     A7E :                     
    1284/     A7E :                     
    1285/     A7E :                     ; other methods
    1286/     A7E :                     
    1287/     A7E :                     divide_method:
    1288/     A7E : BC FF                       mov r4, #0ffh
    1289/     A80 : FB                          mov a, r3
    1290/     A81 : 37                          cpl a
    1291/     A82 : 17                          inc a
    1292/     A83 : AE                          mov r6, a
    1293/     A84 : FA                          mov a, r2
    1294/     A85 :                         -:
    1295/     A85 : 6E                          add a, r6	; r2 - r3
    1296/     A86 : 1C                          inc r4
    1297/     A87 : F6 85                       jc -
    1298/     A89 : 6B                          add a, r3
    1299/     A8A : AD                          mov r5, a
    1300/     A8B : 83                          ret
    1301/     A8C :                     
    1302/     A8C :                     
    1303/     A8C :                     
    1304/     A8C :                     new_apple_position:
    1305/     A8C :                     
    1306/     A8C :                         .loop_to_find_locatioon:
    1307/     A8C : 54 C0                       call get_random_number
    1308/     A8E : AA                          mov r2, a
    1309/     A8F :                             ; extram apple y
    1310/     A8F :                             ; mov a, #7
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 40 - 01/10/2022 00:51:37


    1311/     A8F :                             ; mov r0, #EXTRAM_APPLE_Y
    1312/     A8F :                             ; movx @r0, a
    1313/     A8F :                             ; modulus
    1314/     A8F : BB 07                       mov r3, #7
    1315/     A91 : 54 7E                       call divide_method
    1316/     A93 : FD                          mov a, r5
    1317/     A94 : 17                          inc a
    1318/     A95 : AF                          mov r7, a
    1319/     A96 :                     
    1320/     A96 : 54 C0                       call get_random_number
    1321/     A98 : AA                          mov r2, a
    1322/     A99 :                             ; extram apple x
    1323/     A99 :                             ; mov a, #12
    1324/     A99 :                             ; mov r0, #EXTRAM_APPLE_X
    1325/     A99 :                             ; movx @r0, a
    1326/     A99 :                             ; modulus
    1327/     A99 : BB 0C                       mov r3, #12
    1328/     A9B : 54 7E                       call divide_method
    1329/     A9D : FD                          mov a, r5
    1330/     A9E : 17                          inc a
    1331/     A9F : AA                          mov r2, a
    1332/     AA0 : AD                          mov r5, a
    1333/     AA1 :                             ; move y register
    1334/     AA1 : FF                          mov a, r7
    1335/     AA2 : AB                          mov r3, a
    1336/     AA3 : AE                          mov r6, a
    1337/     AA4 :                     
    1338/     AA4 :                             ; check tile contents
    1339/     AA4 : 54 DB                       call routine_read_extram_char
    1340/     AA6 : 03 F4                       add a, #-EMPTY_TILE
    1341/     AA8 :                             ; jnz .main_loop_reset
    1342/     AA8 : 96 8C                       jnz .loop_to_find_locatioon
    1343/     AAA :                     
    1344/     AAA :                         draw_apple:
    1345/     AAA :                             ; draw apple tile
    1346/     AAA : B9 8B                       mov r1, #calc_extram_char(APPLE_TILE, TILE_RED)
    1347/     AAC : FD                          mov a, r5
    1348/     AAD : AA                          mov r2, a
    1349/     AAE : FE                          mov a, r6
    1350/     AAF : AB                          mov r3, a
    1351/     AB0 :                             ; mov r2, #8
    1352/     AB0 :                             ; mov r3, #2
    1353/     AB0 : 54 CB                       call routine_write_extram_char
    1354/     AB2 :                     
    1355/     AB2 :                         +:
    1356/     AB2 : 93                          retr
    1357/     AB3 :                     
    1358/     AB3 :                     
    1359/     AB3 :                             ; lookup tile for the apple
    1360/     AB3 :                         ;     mov r2, #8
    1361/     AB3 :                         ;     mov r3, #2
    1362/     AB3 :                         ;     call routine_read_extram_char
    1363/     AB3 :                         ;     add a, #-APPLE_TILE
    1364/     AB3 :                         ;     ; jnz .main_loop_reset
    1365/     AB3 :                         ;     jnz .other_check
    1366/     AB3 :                     
    1367/     AB3 :                         ;     ; jmp bank0_start
    1368/     AB3 :                     
    1369/     AB3 :                         ;     ; write a blue apple
    1370/     AB3 :                         ;     write_extram_char 48, 8, 2, TILE_BLUE
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 41 - 01/10/2022 00:51:37


    1371/     AB3 :                     
    1372/     AB3 :                         ;     jmp .main_loop_reset
    1373/     AB3 :                         
    1374/     AB3 :                         ; .other_check:
    1375/     AB3 :                         ;     write_extram_char 49, 8, 2, TILE_RED
    1376/     AB3 :                     
    1377/     AB3 :                         ;     jmp .main_loop_reset
    1378/     AB3 :                     
    1379/     AB3 :                             ; ; lookup tile for the snake end and set r2=x, r3=y
    1380/     AB3 :                             ; mov r0, #EXTRAM_SNAKE_START_X
    1381/     AB3 :                             ; movx a, @r0
    1382/     AB3 :                             ; mov r2, a
    1383/     AB3 :                             ; mov r0, #EXTRAM_SNAKE_START_Y
    1384/     AB3 :                             ; movx a, @r0
    1385/     AB3 :                             ; mov r3, a
    1386/     AB3 :                             ; call routine_read_extram_char
    1387/     AB3 :                     
    1388/     AB3 :                             ; ; does R1 hold an APPLE_TILE icon
    1389/     AB3 :                             ; ; mov r1, a
    1390/     AB3 :                             ; add a, #-49
    1391/     AB3 :                             ; jnz .main_loop_reset
    1392/     AB3 :                     
    1393/     AB3 :                     
    1394/     AB3 :                             align 16
    1395/     AC0 :                     
    1396/     AC0 :                             ; out a = random
    1397/     AC0 :                     get_random_number:
    1398/     AC0 :                             ; https://github.com/7800-devtools/lfsr6502/blob/master/README.txt
    1399/     AC0 : B8 3D                       mov r0, #iram_random
    1400/     AC2 : F0                          mov a, @r0
    1401/     AC3 :                     
    1402/     AC3 : 97                          clr c
    1403/     AC4 : 67                          rrc a
    1404/     AC5 : E6 C9                       jnc .no_eor
    1405/     AC7 : D3 B4                       xrl a, #$B4
    1406/     AC9 :                         .no_eor:
    1407/     AC9 : A0                          mov @r0, a
    1408/     ACA : 93                          retr
    1409/     ACB :                     
    1410/     ACB :                             ; r1 = calc_extram_char(char, color)
    1411/     ACB :                             ; r2 = x
    1412/     ACB :                             ; r3 = y
    1413/     ACB :                     routine_write_extram_char:
    1414/     ACB : FB                          mov a, r3
    1415/     ACC : E7                          rl a
    1416/     ACD : E7                          rl a
    1417/     ACE : AB                          mov r3, a
    1418/     ACF : E7                          rl a
    1419/     AD0 : 6B                          add a, r3
    1420/     AD1 : 6A                          add a, r2
    1421/     AD2 :                     
    1422/     AD2 :                             ; prevent overflow
    1423/     AD2 : A8                          mov r0, a
    1424/     AD3 : 03 A0                       add a, #-(12*8)
    1425/     AD5 : F2 D8                       jb7 +
    1426/     AD7 : 93                          retr
    1427/     AD8 :                     
    1428/     AD8 :                         +:
    1429/     AD8 :                             ; lookup
    1430/     AD8 :                             ; mov r0, a
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 42 - 01/10/2022 00:51:37


    1431/     AD8 : F9                          mov a, r1
    1432/     AD9 : 90                          movx @r0, a
    1433/     ADA : 93                          retr
    1434/     ADB :                     
    1435/     ADB :                             ; r2 = x
    1436/     ADB :                             ; r3 = y
    1437/     ADB :                             ; out a = character
    1438/     ADB :                     routine_read_extram_char:
    1439/     ADB : FB                          mov a, r3
    1440/     ADC : E7                          rl a
    1441/     ADD : E7                          rl a
    1442/     ADE : AB                          mov r3, a
    1443/     ADF : E7                          rl a
    1444/     AE0 : 6B                          add a, r3
    1445/     AE1 : 6A                          add a, r2
    1446/     AE2 : A8                          mov r0, a
    1447/     AE3 :                     
    1448/     AE3 :                             ; lookup
    1449/     AE3 : 80                          movx a, @r0
    1450/     AE4 : 77                          rr a
    1451/     AE5 : 77                          rr a
    1452/     AE6 : 77                          rr a
    1453/     AE7 : 53 3F                       anl a, #00111111b
    1454/     AE9 :                     
    1455/     AE9 : 93                          retr
    1456/     AEA :                     
    1457/     AEA :                     
    1458/     AEA :                             align 64
    1459/     B00 :                     
    1460/     B00 :                     get_dir_from_char_lookup:
    1461/     B00 : 01 08 02                    db DIR_UP,      DIR_LEFT,   DIR_RIGHT
    1462/     B03 : 02 01 04                    db DIR_RIGHT,   DIR_UP,     DIR_DOWN
    1463/     B06 : 04 08 02                    db DIR_DOWN,    DIR_LEFT,   DIR_RIGHT
    1464/     B09 : 08 04 01                    db DIR_LEFT,    DIR_DOWN,   DIR_UP
    1465/     B0C :                     
    1466/     B0C :                             ; r0 = char
    1467/     B0C :                             ; r1 = input dir
    1468/     B0C :                             ; out a = dir
    1469/     B0C :                     get_dir_from_char:
    1470/     B0C : F9                          mov a, r1
    1471/     B0D : 12 1F                       jb0 .up
    1472/     B0F : 32 1B                       jb1 .right
    1473/     B11 : 52 17                       jb2 .down
    1474/     B13 :                         .left:
    1475/     B13 : B9 09                       mov r1, #9
    1476/     B15 : 64 23                       jmp .char_lookup
    1477/     B17 :                         .down:
    1478/     B17 : B9 06                       mov r1, #6
    1479/     B19 : 64 23                       jmp .char_lookup
    1480/     B1B :                         .right:
    1481/     B1B : B9 03                       mov r1, #3
    1482/     B1D : 64 23                       jmp .char_lookup
    1483/     B1F :                         .up:
    1484/     B1F : B9 00                       mov r1, #0
    1485/     B21 : 64 23                       jmp .char_lookup
    1486/     B23 :                     
    1487/     B23 :                         .char_lookup:
    1488/     B23 : F8                          mov a, r0
    1489/     B24 : 03 CD                       add a, #-SNAKE_RIGHT
    1490/     B26 : 96 2D                       jnz +
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 43 - 01/10/2022 00:51:37


    1491/     B28 : F9                          mov a, r1
    1492/     B29 : 03 02                       add a, #2 + lo(get_dir_from_char_lookup)
    1493/     B2B : A3                          movp a, @a
    1494/     B2C : 93                          retr
    1495/     B2D :                         +:
    1496/     B2D : F8                          mov a, r0
    1497/     B2E : 03 CC                       add a, #-SNAKE_LEFT
    1498/     B30 : 96 37                       jnz +
    1499/     B32 : F9                          mov a, r1
    1500/     B33 : 03 01                       add a, #1 + lo(get_dir_from_char_lookup)
    1501/     B35 : A3                          movp a, @a
    1502/     B36 : 93                          retr
    1503/     B37 :                         +:
    1504/     B37 : F9                          mov a, r1
    1505/     B38 : 03 00                       add a, #0 + lo(get_dir_from_char_lookup)
    1506/     B3A : A3                          movp a, @a
    1507/     B3B : 93                          retr
    1508/     B3C :                     
    1509/     B3C : (MACRO)                      assert "hi(get_dir_from_char_lookup) == hi($)"
    1509/     B3C : =>FALSE                      if (~~val("hi(get_dir_from_char_lookup) == hi($)"))
    1509/     B3C :                                 error "hi(get_dir_from_char_lookup) == hi($)"
    1509/     B3C : [1509]                       endif
    1510/     B3C :                     
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 44 - 01/10/2022 00:51:37


  Symbol Table (* = unused):
  --------------------------

 APPLE_TILE :                    31 - | *ARCHITECTURE :  "x86_64-apple-osx" - |
*BANK0 :                        387 - | *BANK01 :                       383 - |
*BANK02 :                       37F - |  BANK0_START :                  40C C |
*BANK3 :                        38B - | *BIGENDIAN :                      0 - |
*BITCLEAR :                     280 - | *BITFUNCSINC :                    1 - |
*BITSET :                       28A - | *BITTEST :                      26A - |
*BRANCHEXT :                      0 - | *CALCCHAR23 :                   14B - |
*CASESENSITIVE :                  0 - |  CHANGE_DIRECTION :             900 C |
 CHANGE_DIRECTION.ACCEPT :      965 C |  CHANGE_DIRECTION.DOWN :        93D C |
 CHANGE_DIRECTION.LEFT :        951 C |  CHANGE_DIRECTION.RIGHT :       929 C |
 CHANGE_DIRECTION.SKIP :        975 C |  CHANGE_DIRECTION.UP :          915 C |
*CHECK_TARGET_TILE :            9DD C |  CHECK_TARGET_TILE.ATE_APPLE :  9EF C |
 CHECK_TARGET_TILE.CHECK_COLLISION :                                   0A16 C |
*CLEARCHAR :                    16B - | *CLOCK_FORWARD :                 40 - |
*CLOCK_STOP :                    80 - | *COL_BCK_BLACK :                  0 - |
 COL_BCK_BLUE :                   8 - | *COL_BCK_CYAN :                  18 - |
 COL_BCK_GREEN :                 10 - | *COL_BCK_RED :                   20 - |
*COL_BCK_VIOLET :                28 - | *COL_BCK_WHITE :                 38 - |
*COL_BCK_YELLOW :                30 - | *COL_CHR_BLACK :                  0 - |
*COL_CHR_BLUE :                   8 - | *COL_CHR_CYAN :                  0C - |
 COL_CHR_GREEN :                  4 - |  COL_CHR_RED :                    2 - |
*COL_CHR_VIOLET :                0A - |  COL_CHR_WHITE :                 0E - |
 COL_CHR_YELLOW :                 6 - |  COL_GRD_BLACK :                  0 - |
*COL_GRD_BLUE :                   1 - | *COL_GRD_CYAN :                   3 - |
*COL_GRD_GREEN :                  2 - | *COL_GRD_LUM :                   40 - |
*COL_GRD_RED :                    4 - |  COL_GRD_VIOLET :                 5 - |
*COL_GRD_WHITE :                  7 - | *COL_GRD_YELLOW :                 6 - |
*COL_PATR_BLCK :                 80 - | *COL_PATR_DHGHT :                10 - |
*COL_PATR_DWDTH :                20 - | *COL_PATR_INVRT :                40 - |
*COL_PATR_STABLE :                8 - | *COL_PBCK_BLACK :                 0 - |
*COL_PBCK_BLUE :                 40 - | *COL_PBCK_CYAN :                 60 - |
*COL_PBCK_GREEN :                20 - | *COL_PBCK_RED :                  10 - |
*COL_PBCK_VIOLET :               50 - | *COL_PBCK_WHITE :                70 - |
*COL_PBCK_YELLOW :               30 - | *COL_PLUS_BLACK :                 0 - |
*COL_PLUS_BLUE :                  4 - | *COL_PLUS_CYAN :                  6 - |
*COL_PLUS_GREEN :                 2 - | *COL_PLUS_RED :                   1 - |
*COL_PLUS_VIOLET :                5 - | *COL_PLUS_WHITE :                 7 - |
*COL_PLUS_YELLOW :                3 - | *COL_SATR_BOX :                   2 - |
*COL_SATR_CONC :                  1 - | *COL_SATR_ENABLE :               80 - |
*COL_SATR_LINE :                  4 - | *COL_SPR_BLACK :                  0 - |
*COL_SPR_BLUE :                  20 - | *COL_SPR_CYAN :                  30 - |
*COL_SPR_GREEN :                 10 - | *COL_SPR_RED :                    8 - |
*COL_SPR_VIOLET :                28 - | *COL_SPR_WHITE :                 38 - |
*COL_SPR_YELLOW :                18 - | *COMPMODE :                       0 - |
 COMPUTE_CHARS :                630 C |  COMPUTE_CHAR_FROM_EXTRAM :     60A C |
 COMPUTE_CHAR_FROM_EXTRAM_MOV : 61D C | *COMPUTE_COLOR :                608 C |
 COMPUTE_PAGE :                 600 C | *CONSTPI :        3.141592653589793 - |
*COPYREGS :                      89 - | *CUSTOM :                         0 - |
*DATE :                "01/10/2022" - | *DECODEJOYSTICK :               3B1 - |
 DIR_DOWN :                       4 - |  DIR_LEFT :                       8 - |
 DIR_RIGHT :                      2 - |  DIR_UP :                         1 - |
*DIVIDE :                       3DD - |  DIVIDE_METHOD :               0A7E C |
*DOCLOCK :                      1B0 - | *DRAW_APPLE :                  0AAA C |
 DRAW_HELLOWORLD :              448 C |  DRAW_HELLOWORLD.COLUMN_11 :    4A1 C |
 DRAW_HELLOWORLD.COLUMN_9 :     48D C |  DRAW_HELLOWORLD.LOOP :         452 C |
*EIN_EEDO :                       1 - |  EMPTY_TILE :                   ' ' - |
*EOUT_EECLK :                     4 - | *EOUT_EECS :                      2 - |
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 45 - 01/10/2022 00:51:37


*EOUT_EEDI :                      8 - | *EOUT_TX :                        1 - |
*ERAM_MINUTES :                   1 - | *ERAM_SECONDS :                   2 - |
*EREG_CODEBANK :                 80 - | *EREG_DATABANK :                 81 - |
*EREG_IO_IN :                    83 - | *EREG_IO_OUT :                   82 - |
*EXTRAMENABLE :                 0EC - |  EXTRAM_FRAME :                  6A - |
 EXTRAM_SCORE :                  62 - |  EXTRAM_SNAKE_END_DIR :          69 - |
 EXTRAM_SNAKE_END_X :            67 - |  EXTRAM_SNAKE_END_Y :            68 - |
 EXTRAM_SNAKE_START_DIR :        66 - |  EXTRAM_SNAKE_START_X :          64 - |
 EXTRAM_SNAKE_START_Y :          65 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GAME_OVER :                   0A20 C |
 GETJOYSTICK :                  38F - | *GETJOYSTICK_P17 :              395 - |
 GET_DIR_FROM_CHAR :           0B0C C |
 GET_DIR_FROM_CHAR.CHAR_LOOKUP :                                       0B23 C |
 GET_DIR_FROM_CHAR.DOWN :      0B17 C | *GET_DIR_FROM_CHAR.LEFT :      0B13 C |
 GET_DIR_FROM_CHAR.RIGHT :     0B1B C |  GET_DIR_FROM_CHAR.UP :        0B1F C |
 GET_DIR_FROM_CHAR_LOOKUP :    0B00 C |  GET_RANDOM_NUMBER :           0AC0 C |
 GET_RANDOM_NUMBER.NO_EOR :    0AC9 C |  GFXOFF :                       11C - |
 GFXON :                        127 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HELLOSTR :                     4B0 C |
*ICTRL_GAMEOVER :                20 - |  ICTRL_LINEIRQ :                 40 - |
*ICTRL_NEXTFRAME :               80 - | *INEXTMODE :                      0 - |
*INIT :                         0F1 - | *INITCLOCK :                    23A - |
*INIT_GRID :                    437 C |  INIT_GRID.LOOPGV :             43B C |
*INIT_TEXT :                    441 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *IRAM_CLOCK :                    3E - |
*IRAM_COLLISION :                3D - |  IRAM_ICTRL :                    3C - |
 IRAM_IRAM_INDEX :               3A - |  IRAM_IRQCTRL :                  3F - |
 IRAM_KEYBOARD :                 3B - |  IRAM_RANDOM :                   3D - |
*IRAM_REWRITE_END :              37 - |  IRAM_REWRITE_START :            34 - |
*IRAM_TILE_COMPUTE_END :         33 - |  IRAM_TILE_COMPUTE_START :       20 - |
 IRAM_VBLANK_BKP_A :             38 - |  IRAM_VBLANK_BKP_P1 :            39 - |
 IRQ :                            9 - | *IRQEND :                        14 - |
*IRQ_SOUND :                     40 - | *IRQ_TABLE :                     80 - |
*LISTON :                         1 - | *MACEXP :                         7 - |
 MAIN :                         800 C |  MAIN.CNT :                       2 - |
 MAIN_LOOP :                    865 C |  MAIN_LOOP.MAIN_LOOP_START :    86B C |
 MAIN_LOOP.NEXT_FRAME :         888 C | *MOMCPU :                      8048 - |
*MOMCPUNAME :                "8048" - |  MOVE_HEAD :                    990 C |
 MOVE_HEAD.DONE :               9D9 C |  MOVE_HEAD.DOWN :               9CB C |
*MOVE_HEAD.LEFT :               9A1 C |  MOVE_HEAD.RIGHT :              9BD C |
 MOVE_HEAD.UP :                 9AF C |  MOVE_TAIL :                   0A3A C |
*MOVE_TAIL.ERASE_TILE :        0A53 C | *MULTIPLY :                     3CF - |
 MYVSYNCIRQ :                   4C0 C |
*MYVSYNCIRQ.CONTINUE_VBLANK_IRQ :                                       588 C |
 MYVSYNCIRQ.COUNT :               6 - |  MYVSYNCIRQ.SETUP_FRAME :       4CF C |
 MYVSYNCIRQ.SKIP_LINE_IRQ :     4C8 C |
*MYVSYNCIRQ.WRITE_INDIVIDUAL_CHARS :                                    4EE C |
*NESTMAX :                      100 - |  NEW_APPLE_POSITION :          0A8C C |
 NEW_APPLE_POSITION.LOOP_TO_FIND_LOCATIOON :                           0A8C C |
*NIBBLEMIXER :                  2A4 - | *PACKING :                        0 - |
*PADDING :                        1 - | *PARSESND :                      4B - |
*PLAYSOUND :                    1A2 - | *PLUSCMD :                      288 - |
*PLUSDATA :                     28C - | *PLUSENABLE :                   2A1 - |
*PLUSHIDE :                     296 - | *PLUSLOADR :                    283 - |
*PLUSMODE :                     299 - | *PLUSREADY :                    27D - |
*PLUSSELECTGAME :               2C2 - | *PLUSSTART :                    2AB - |
*PLUS_BLCK_FULL :                40 - | *PLUS_CMD_BROW :                  0 - |
*PLUS_CMD_INCC :                 60 - | *PLUS_CMD_LOADM :                80 - |
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 46 - 01/10/2022 00:51:37


*PLUS_CMD_LOADR :               0A0 - | *PLUS_CMD_LOADX :                40 - |
*PLUS_CMD_LOADY :                20 - | *PLUS_CMD_LOADY0 :              0C0 - |
*PLUS_LOADM_RD :                 20 - | *PLUS_LOADM_RDNI :               60 - |
*PLUS_LOADM_RDSL :              0A0 - | *PLUS_LOADM_WR :                  0 - |
*PLUS_LOADM_WRNI :               40 - | *PLUS_LOADM_WRSL :               80 - |
*PLUS_LOADR_BLNK :               80 - | *PLUS_LOADR_BOX :                 2 - |
*PLUS_LOADR_CONC :                4 - | *PLUS_LOADR_CRSR :               10 - |
*PLUS_LOADR_DSPL :                1 - | *PLUS_LOADR_SROW :                8 - |
*PLUS_LOADR_TL :                 20 - | *PLUS_LOADR_TT :                 40 - |
*PLUS_LOADY0_ZOM :               20 - |  PRINTCHAR :                    3EA - |
*PUTCHAR23 :                    261 - | *RANDOM :                       293 - |
*READKEY :                      0B0 - | *READKEY_PLUS :                 0BC - |
*RELAXED :                        1 - |  ROUTINE_READ_EXTRAM_CHAR :    0ADB C |
 ROUTINE_WRITE_EXTRAM_CHAR :   0ACB C | *ROW_WRITE_TO_VDC :             6FD C |
*ROW_WRITE_TO_VDC.CRITICAL_ZONE :                                       707 C |
*ROW_WRITE_TO_VDC.SLEEP_UNTIL_NEXT_ROW :                                783 C |
 SELECTGAME :                   2C3 - |  SNAKE_LEFT :                    34 - |
 SNAKE_RIGHT :                   33 - |  SNAKE_TILE :                    3A - |
 SOUNDIRQ :                      44 - | *SPR_DOUBLE :                     4 - |
*SPR_EVENSHIFT :                  2 - | *TABLEBCDBYTE :                 17C - |
*TABLEBCDNIBBLE :               229 - | *TABLECHAR23 :                  22C - |
*TABLEEND :                     132 - | *TABLEPRINTCHAR :               197 - |
*TABLEPUT2 :                    235 - |  TEXT_HI_YPOS :                  0C - |
 TEXT_XPOS :                     68 - |  TEXT_XPOS2 :                    28 - |
 TILE_BLUE :                      3 - |  TILE_GREEN :                     2 - |
 TILE_RED :                       1 - |  TILE_WHITE :                     0 - |
*TIME :                  "00:51:37" - |  TIMEIRQ :                      590 C |
*TIMEIRQ.FINISH_FRAME :         5ED C |  TIMING_AFTER_COMPUTE :          29 - |
 TIMING_CYCLES_TO_FIRST_ROW :    13 - |  TIMING_SCANLINE_START :        0F4 - |
 TIMING_VDC_WRITE_PADDING :       4 - |
 TIMING_Y_START_OFFSET :                                  0FFFFFFFFFFFFFFF0 - |
*TRUE :                           1 - | *TUNE_ALARM :                    3C - |
*TUNE_BEEP_ERROR :               28 - | *TUNE_BUZZ :                     5A - |
*TUNE_EXPLODE :                  2E - | *TUNE_KEYCLICK :                 56 - |
*TUNE_SELECT :                   4A - | *TUNE_SELECT2 :                  5E - |
*TUNE_SHOOT :                    6A - | *UPDATE_TAIL_POSITION :        0A5B C |
 UPDATE_TAIL_POSITION.DONE :   0A7C C |  UPDATE_TAIL_POSITION.DOWN :   0A69 C |
*UPDATE_TAIL_POSITION.LEFT :   0A62 C |  UPDATE_TAIL_POSITION.RIGHT :  0A70 C |
 UPDATE_TAIL_POSITION.UP :     0A77 C | *VDCENABLE :                    0E7 - |
 VDC_CHAR0 :                     10 - | *VDC_CHAR1 :                     14 - |
*VDC_CHAR2 :                     18 - | *VDC_CHAR3 :                     1C - |
*VDC_CHAR4 :                     20 - | *VDC_CHAR5 :                     24 - |
 VDC_CHAR6 :                     28 - | *VDC_CHAR7 :                     2C - |
*VDC_CHAR8 :                     30 - | *VDC_CHAR9 :                     34 - |
*VDC_CHARA :                     38 - | *VDC_CHARB :                     3C - |
*VDC_COLLISION :                0A2 - | *VDC_COLL_CHAR :                 80 - |
*VDC_COLL_EXT :                  40 - | *VDC_COLL_HGRD :                 20 - |
*VDC_COLL_SPR0 :                  1 - | *VDC_COLL_SPR1 :                  2 - |
*VDC_COLL_SPR2 :                  4 - | *VDC_COLL_SPR3 :                  8 - |
*VDC_COLL_VGRD :                 10 - |  VDC_COLOR :                    0A3 - |
 VDC_CONTROL :                  0A0 - | *VDC_CTRL_BEAM :                  2 - |
*VDC_CTRL_DOT :                  40 - | *VDC_CTRL_FILL :                 80 - |
*VDC_CTRL_FORE :                 20 - | *VDC_CTRL_GRID :                  8 - |
*VDC_CTRL_HINT :                  1 - | *VDC_CTRL_OVRLAY :               10 - |
*VDC_CTRL_SINT :                  4 - | *VDC_GRIDH0 :                   0C0 - |
*VDC_GRIDH1 :                   0C1 - | *VDC_GRIDH2 :                   0C2 - |
*VDC_GRIDH3 :                   0C3 - | *VDC_GRIDH4 :                   0C4 - |
*VDC_GRIDH5 :                   0C5 - | *VDC_GRIDH6 :                   0C6 - |
*VDC_GRIDH7 :                   0C7 - | *VDC_GRIDH8 :                   0C8 - |
*VDC_GRIDI0 :                   0D0 - | *VDC_GRIDI1 :                   0D1 - |
 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 47 - 01/10/2022 00:51:37


*VDC_GRIDI2 :                   0D2 - | *VDC_GRIDI3 :                   0D3 - |
*VDC_GRIDI4 :                   0D4 - | *VDC_GRIDI5 :                   0D5 - |
*VDC_GRIDI6 :                   0D6 - | *VDC_GRIDI7 :                   0D7 - |
*VDC_GRIDI8 :                   0D8 - |  VDC_GRIDV0 :                   0E0 - |
*VDC_GRIDV1 :                   0E1 - | *VDC_GRIDV2 :                   0E2 - |
*VDC_GRIDV3 :                   0E3 - | *VDC_GRIDV4 :                   0E4 - |
*VDC_GRIDV5 :                   0E5 - | *VDC_GRIDV6 :                   0E6 - |
*VDC_GRIDV7 :                   0E7 - | *VDC_GRIDV8 :                   0E8 - |
*VDC_GRIDV9 :                   0E9 - |  VDC_QUAD0 :                     40 - |
 VDC_QUAD1 :                     50 - |  VDC_QUAD2 :                     60 - |
 VDC_QUAD3 :                     70 - | *VDC_SCANLINE :                 0A4 - |
*VDC_SCANROW :                  0A5 - | *VDC_SOUND0 :                   0A7 - |
*VDC_SOUND1 :                   0A8 - | *VDC_SOUND2 :                   0A9 - |
 VDC_SOUNDCTRL :                0AA - | *VDC_SOUND_ENAB :                80 - |
*VDC_SOUND_FREQ :                20 - | *VDC_SOUND_LOOP :                40 - |
*VDC_SOUND_NOISE :               10 - | *VDC_SPR0_CTRL :                  0 - |
*VDC_SPR0_SHAPE :                80 - | *VDC_SPR1_CTRL :                  4 - |
*VDC_SPR1_SHAPE :                88 - | *VDC_SPR2_CTRL :                  8 - |
*VDC_SPR2_SHAPE :                90 - | *VDC_SPR3_CTRL :                 0C - |
*VDC_SPR3_SHAPE :                98 - | *VDC_STATUS :                   0A1 - |
*VDC_STAT_BIT4 :                 10 - | *VDC_STAT_BIT5 :                 20 - |
*VDC_STAT_CHRLAP :               80 - | *VDC_STAT_HBLANK :                1 - |
*VDC_STAT_OVRLAY :               40 - | *VDC_STAT_PSTRB :                 2 - |
*VDC_STAT_SOUND :                 4 - | *VDC_STAT_VBLANK :                8 - |
*VERSION :                     142F - | *VPP_BUSY :                       6 - |
*VPP_TA_CMD :                     2 - | *VPP_TA_RD :                      4 - |
*VPP_TA_WR :                      0 - | *VPP_TB_CMD :                     3 - |
*VPP_TB_RD :                      5 - | *VPP_TB_WR :                      1 - |
 VSYNCIRQ :                      1A - | *WAITFORKEY :                   13D - |
*WAITVSYNC :                    176 - | *WRITE_EXTRAM_CHAR_BYTES :      420 C |
*WRITE_EXTRAM_CHAR_BYTES.ALSO_CHECK_IF_NOT_ZERO :                       431 C |
 WRITE_EXTRAM_CHAR_BYTES.WRITE_TO_EXTERNAL_RAM :                        426 C |
*Z80SYNTAX :                      0 - |  __BACK3 :                     0A30 C |
 __BACK4 :                     0A85 C |  __FORW0 :                      879 C |
 __FORW1 :                      920 C |  __FORW10 :                    0A35 C |
*__FORW11 :                    0AB2 C |  __FORW12 :                    0AD8 C |
 __FORW13 :                    0B2D C |  __FORW14 :                    0B37 C |
 __FORW2 :                      934 C |  __FORW3 :                      948 C |
 __FORW4 :                      95C C |  __FORW5 :                      9A8 C |
 __FORW6 :                      9B6 C |  __FORW7 :                      9C4 C |
 __FORW8 :                      9D2 C |  __FORW9 :                     0A1D C |

    422 symbols
    286 unused symbols

 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 48 - 01/10/2022 00:51:37


  Defined Macros:
  ---------------

ASSERT                                | COMPUTE_CHAR_MACRO                   
DISABLE_VDC_FOREGROUND                | ENABLE_VDC_FOREGROUND                
INLINE_EXTERNAL_RAM                   | INLINE_EXTERNAL_VDC                  
READ_EXTRAM_CHAR                      | SLEEP_LOOP                           
SLEEP_NOP                             | WRITE_EXTRAM_CHAR                    
WRITE_EXTRAM_STRING                   | WRITE_TO_CHAR                        

     12 macros

 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 49 - 01/10/2022 00:51:37


  Defined Functions:
  ------------------

CALC_EXTRAM_CHAR                      | CALC_CHAR_3                          
CALC_CHAR_2                           | ROTRN                                
ROTLN                                 | SHRN                                 
SHLN                                  | GETBIT                               
EVEN                                  | ODD                                  
LOWORD                                | HIWORD                               
LO                                    | HI                                   
CUTOUT                                | INVMASK                              
MASK                                  |

 AS V1.42 Beta [Bld 213] - Source File main.asm - Page 50 - 01/10/2022 00:51:37


  Code Pages:
  ----------

STANDARD (0 changed characters)
VIDEOPAC (47 changed characters)

2 code pages

0.06 seconds assembly time

   2004 lines source file
   2613 lines incl. macro expansions
      3 passes
      0 errors
      0 warnings
